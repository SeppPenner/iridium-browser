// Copyright 2019 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module new_tab_page.mojom;

import "skia/public/mojom/skcolor.mojom";
import "url/mojom/url.mojom";
import "mojo/public/mojom/base/text_direction.mojom";

struct MostVisitedTile {
  string title;
  mojo_base.mojom.TextDirection title_direction;
  url.mojom.Url url;
};

struct MostVisitedInfo {
  bool custom_links_enabled;
  bool visible;
  array<MostVisitedTile> tiles;
};

struct ThemeColors {
  // The theme's frame color.
  skia.mojom.SkColor frame;
  // The theme's active tab color.
  skia.mojom.SkColor active_tab;
};

// A collection of background images.
struct BackgroundCollection {
  // Collection identifier.
  string id;
  // Localized string of the collection name.
  string label;
  // URL to a preview image for the collection. Can point to untrusted content.
  url.mojom.Url preview_image_url;
};

// A background image in a collection.
struct BackgroundImage {
  // Human readable attributions of the background image.
  string attribution_1;
  string attribution_2;
  // URL associated with the background image. Used for href.
  url.mojom.Url attribution_url;
  // URL of image. Can point to untrusted content.
  url.mojom.Url image_url;
  // URL to a preview of the image. Can point to untrusted content.
  url.mojom.Url preview_image_url;
};

// A predefined theme provided by Chrome. Created from data embedded in the
// Chrome binary.
struct ChromeTheme {
  // Theme identifier.
  int32 id;
  // Localized string of the theme name.
  string label;
  ThemeColors colors;
};

enum ThemeType {
  DEFAULT,
  AUTOGENERATED,
  CHROME,
  THIRD_PARTY,
};

// Additional info for third-party themes.
struct ThirdPartyThemeInfo {
  // ID in the Chrome Web Store.
  string id;
  // Human-readable theme name.
  string name;
};

union ThemeInfo {
  // Set if the theme is a Chrome theme.
  int32 chrome_theme_id;
  // Set if the theme is autogenerated.
  ThemeColors autogenerated_theme_colors;
  // Set if the theme is a third-party theme.
  ThirdPartyThemeInfo third_party_theme_info;
};

// A generic theme.
struct Theme {
  // The theme's type (e.g. default or third-party).
  ThemeType type;
  skia.mojom.SkColor background_color;
  skia.mojom.SkColor shortcut_background_color;
  skia.mojom.SkColor shortcut_text_color;
  // True if the theme is dark (e.g. NTP background color is dark).
  bool is_dark;
  // Color of Google logo. If not set show the logo multi-colored.
  skia.mojom.SkColor? logo_color;
  // Selected collection for daily refresh.
  string? daily_refresh_collection_id;
  // URL to the background image. Can point to untrusted content.
  url.mojom.Url? background_image_url;
  // Human readable attributions of the background image.
  string? background_image_attribution_1;
  string? background_image_attribution_2;
  // URL associated with the background image. Used for href.
  url.mojom.Url? background_image_attribution_url;

  // TODO(crbug.com/1040682): Additional info about the theme depending on the
  // type. That should be optional since only some themes require it. However,
  // making this field optional crashes JS.
  ThemeInfo info;
};

// Specifies look of the doodle share button.
struct DoodleShareButton {
  // Position in pixels relative to the doodle's upper left corner.
  int32 x;
  int32 y;
  // Button background color.
  skia.mojom.SkColor background_color;
  // Data URL of icon shown on the button.
  url.mojom.Url icon_url;
};

// The contents of simple and animated doodles.
struct ImageDoodleContent {
  // Doodle image encoded as data URL.
  url.mojom.Url image_url;
  // URL opened in new tab when the doodle is clicked.
  url.mojom.Url on_click_url;
  // URL pointing to animated content (e.g. gif). Only set for animated doodles.
  url.mojom.Url? animation_url;
  // Specification of the share button.
  DoodleShareButton share_button;
};

// The contents of a doodle.
union DoodleContent {
  // Set for simple and animated doodles.
  ImageDoodleContent image_doodle;
  // URL pointing to doodle page. Set for interactive doodles.
  url.mojom.Url url;
};

// A doodle. Retrieved from the Google doodle server.
struct Doodle {
  // The doodle content.
  DoodleContent content;
};

// Used by the WebUI page to bootstrap bidirectional communication.
interface PageHandlerFactory {
  // The WebUI page's |BrowserProxy| singleton calls this method when the page
  // is first initialized.
  CreatePageHandler(pending_remote<Page> page,
                    pending_receiver<PageHandler> handler);
};

// Browser-side handler for requests from WebUI page.
interface PageHandler {
  // Adds tile.
  AddMostVisitedTile(url.mojom.Url url, string title) => (bool success);
  // Deletes tile by |url|.
  DeleteMostVisitedTile(url.mojom.Url url);
  // Moves tile identified by url to a new position at index |new_pos|.
  ReorderMostVisitedTile(url.mojom.Url url, uint8 new_pos);
  // Replaces the custom and most-visited tiles with the default tile set.
  RestoreMostVisitedDefaults();
  // Sets the background image and notifies all NTPs of the change.
  SetBackgroundImage(string attribution_1, string attribution_2,
      url.mojom.Url attribution_url, url.mojom.Url image_url);
  // Sets collection id for daily refresh. When |collection_id| is empty, the
  // daily refresh is turned off.
  SetDailyRefreshCollectionId(string collection_id);
  // Clears the background and daily refresh settings.
  SetNoBackgroundImage();
  // Set the visibility and whether custom links are enabled.
  SetMostVisitedSettings(bool customLinksEnabled, bool visible);
  // Undoes the last action done to the tiles (add, delete, reorder, restore or
  // update). Note that only the last action can be undone.
  UndoMostVisitedTileAction();
  // Called to update the tiles.
  UpdateMostVisitedInfo();
  // Updates a tile by url.
  UpdateMostVisitedTile(url.mojom.Url url, url.mojom.Url new_url,
                        string new_title)
      => (bool success);
  // Returns the pre-defined Chrome themes.
  GetChromeThemes() => (array<ChromeTheme> chromeThemes);
  // Applies the default theme.
  ApplyDefaultTheme();
  // Applies autogenerated theme for the given color.
  ApplyAutogeneratedTheme(skia.mojom.SkColor frame_color);
  // Applies the predefined Chrome theme with the given ID.
  ApplyChromeTheme(int32 id);
  // Confirms changes made to the theme.
  ConfirmThemeChanges();
  // Reverts changes made to the theme.
  RevertThemeChanges();
  // Returns the collections of background images.
  GetBackgroundCollections() => (array<BackgroundCollection> collections);
  // Returns the images of a collection identified by |collection_id|.
  GetBackgroundImages(string collection_id) => (array<BackgroundImage> images);
  // Invisibly focuses the omnibox.
  FocusOmnibox();
  // Pastes |text| into the omnibox.
  PasteIntoOmnibox(string text);
  // Gets current doodle if there is one.
  GetDoodle() => (Doodle? doodle);
};

// WebUI-side handler for requests from the browser.
interface Page {
  // Updates the page with most-visited info which includes whether the
  // tiles should be shown, if links can be customized and the tiles.
  SetMostVisitedInfo(MostVisitedInfo info);
  // Sets the current theme.
  SetTheme(Theme theme);
  // If |focused| fakes focus on the fakebox.
  SetFakeboxFocused(bool focused);
  // If |visible| shows the fakebox.
  SetFakeboxVisible(bool visible);
};
