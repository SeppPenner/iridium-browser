// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

#include <memory>
#include <utility>

#include "base/profiler/native_unwinder_android.h"
#include "chrome/android/features/stack_unwinder/public/memory_regions_map.h"
#include "chrome/android/modules/stack_unwinder/internal/jni_headers/StackUnwinderModuleContentsImpl_jni.h"

namespace {

class MemoryRegionsMap : public stack_unwinder::MemoryRegionsMap {
 public:
  MemoryRegionsMap(std::unique_ptr<unwindstack::Maps> maps,
                   std::unique_ptr<unwindstack::Memory> memory)
      : maps_(std::move(maps)), memory_(std::move(memory)) {}

  unwindstack::Maps* maps() { return maps_.get(); }
  unwindstack::Memory* memory() { return memory_.get(); }

 private:
  std::unique_ptr<unwindstack::Maps> maps_;
  std::unique_ptr<unwindstack::Memory> memory_;
};

}  // namespace

std::unique_ptr<stack_unwinder::MemoryRegionsMap> CreateMemoryRegionsMap() {
  return std::make_unique<MemoryRegionsMap>(
      base::NativeUnwinderAndroid::CreateMaps(),
      base::NativeUnwinderAndroid::CreateProcessMemory());
}

std::unique_ptr<base::Unwinder> CreateNativeUnwinder(
    stack_unwinder::MemoryRegionsMap* memory_regions_map) {
  // The user is expected to only pass the subclass generated by
  // CreateMemoryRegionsMap().
  MemoryRegionsMap* concrete_memory_regions_map =
      static_cast<MemoryRegionsMap*>(memory_regions_map);
  // TODO(https://crbug.com/1004855): Provide the address of the Chrome module
  // to as the |exclude_module_with_base_address| parameter.
  return std::make_unique<base::NativeUnwinderAndroid>(
      concrete_memory_regions_map->maps(),
      concrete_memory_regions_map->memory());
}

static jlong
JNI_StackUnwinderModuleContentsImpl_GetCreateMemoryRegionsMapFunction(
    JNIEnv* env) {
  return reinterpret_cast<jlong>(&CreateMemoryRegionsMap);
}

static jlong
JNI_StackUnwinderModuleContentsImpl_GetCreateNativeUnwinderFunction(
    JNIEnv* env) {
  return reinterpret_cast<jlong>(&CreateNativeUnwinder);
}
