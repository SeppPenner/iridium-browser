From 008f18d80bf140f0cc0b9fc012fb2bfc6a2dcc03 Mon Sep 17 00:00:00 2001
From: Jan Engelhardt <jengelh@inai.de>
Date: Mon, 3 Nov 2014 10:52:56 +0100
Subject: [PATCH 46/50] src: flag evil connections

Prefix URLs to Google services with trk: so that whenever something
tries to load them, the developer will be informed via printf and
dialog about this infraction.

If you see such dialog, we know that (a) either the URL needs to be
whitelisted, or (b) the feature that triggered it needs to be disabled
by default.
---
 build/mac/tweak_info_plist.py                                |  4 ++--
 chrome/browser/chrome_process_finder_win.cc                  |  2 +-
 .../browser/chromeos/customization/customization_document.cc |  2 +-
 chrome/browser/chromeos/dbus/printer_service_provider.cc     |  2 +-
 .../chromeos/extensions/file_manager/private_api_drive.cc    |  2 +-
 .../chromeos/extensions/file_manager/private_api_misc.cc     |  2 +-
 .../chromeos/extensions/file_manager/private_api_strings.cc  | 12 ++++++------
 chrome/browser/chromeos/login/signin/oauth2_login_manager.cc |  2 +-
 .../chrome_component_updater_configurator.cc                 |  4 ++--
 chrome/browser/drive/drive_api_service.cc                    |  8 ++++----
 chrome/browser/extensions/install_signer.cc                  |  2 +-
 chrome/browser/first_run/try_chrome_dialog_view.cc           |  2 +-
 chrome/browser/gpu/three_d_api_observer.cc                   |  2 +-
 chrome/browser/infobars/insecure_content_infobar_delegate.cc |  2 +-
 chrome/browser/media/webrtc_log_uploader.cc                  |  2 +-
 chrome/browser/metrics/variations/variations_service.cc      |  2 +-
 chrome/browser/nacl_host/nacl_infobar_delegate.cc            |  2 +-
 chrome/browser/net/chrome_fraudulent_certificate_reporter.cc |  2 +-
 chrome/browser/net/predictor.cc                              |  2 +-
 chrome/browser/plugins/plugin_infobar_delegates.cc           |  4 ++--
 chrome/browser/prerender/prerender_field_trial.cc            |  2 +-
 .../chromeos/chromevox/chromevox/background/prefs.js         |  4 ++--
 .../browser/resources/default_apps/external_extensions.json  |  4 ++--
 .../browser/safe_browsing/client_side_detection_service.cc   |  4 ++--
 chrome/browser/safe_browsing/download_feedback.cc            |  2 +-
 chrome/browser/safe_browsing/safe_browsing_blocking_page.cc  |  8 ++++----
 chrome/browser/safe_browsing/safe_browsing_service.cc        |  8 ++++----
 chrome/browser/safe_browsing/srt_global_error_win.cc         |  2 +-
 chrome/browser/services/gcm/gcm_account_tracker.cc           |  4 ++--
 .../browser/spellchecker/spellcheck_hunspell_dictionary.cc   |  2 +-
 chrome/browser/spellchecker/spelling_service_client.cc       |  2 +-
 .../experimental/supervised_user_async_url_checker.cc        |  2 +-
 chrome/browser/sync/profile_sync_service.cc                  |  4 ++--
 chrome/browser/ui/app_list/search/people/people_provider.cc  |  4 ++--
 .../browser/ui/startup/obsolete_system_infobar_delegate.cc   |  2 +-
 chrome/browser/ui/views/outdated_upgrade_bubble_view.cc      |  2 +-
 .../ui/website_settings/mock_permission_bubble_request.cc    |  6 +++---
 chrome/browser/ui/webui/ntp/ntp_resource_cache.cc            |  8 ++++----
 chrome/common/extensions/extension_constants.cc              |  2 +-
 chrome/common/localized_error.cc                             |  2 +-
 chrome/common/url_constants.cc                               |  6 +++---
 chrome/installer/util/google_chrome_distribution.cc          |  2 +-
 chrome/installer/util/user_experiment.cc                     |  2 +-
 chromecast/browser/service/cast_service_simple.cc            |  2 +-
 chromeos/geolocation/simple_geolocation_provider.cc          |  2 +-
 cloud_print/gcp20/prototype/cloud_print_requester.cc         |  2 +-
 cloud_print/service/service_state.cc                         |  2 +-
 cloud_print/virtual_driver/win/install/setup.cc              |  2 +-
 .../autofill/core/browser/autofill_download_manager.cc       |  2 +-
 components/cloud_devices/common/cloud_devices_urls.cc        | 12 ++++++------
 components/copresence/rpc/rpc_handler.cc                     |  2 +-
 components/crash/app/breakpad_linux.cc                       |  2 +-
 components/crash/tools/crash_service.cc                      |  2 +-
 .../enhanced_bookmarks/bookmark_server_cluster_service.cc    |  2 +-
 .../enhanced_bookmarks/bookmark_server_search_service.cc     |  2 +-
 components/feedback/feedback_uploader.cc                     |  2 +-
 components/google/core/browser/google_url_tracker.cc         |  2 +-
 components/history/core/browser/web_history_service.cc       |  6 +++---
 components/invalidation/gcm_network_channel.cc               |  2 +-
 components/invalidation/p2p_invalidator.cc                   |  2 +-
 components/metrics/url_constants.cc                          |  2 +-
 components/password_manager/core/browser/password_store.cc   |  8 ++++----
 components/policy/core/common/policy_loader_win.cc           |  2 +-
 components/policy/resources/policy_templates.json            |  6 +++---
 components/rappor/rappor_service.cc                          |  2 +-
 components/search_engines/prepopulated_engines.json          |  2 +-
 components/signin/core/browser/signin_account_id_helper.cc   |  2 +-
 components/translate/core/browser/translate_url_fetcher.cc   |  1 +
 content/browser/speech/google_one_shot_remote_engine.cc      |  2 +-
 content/browser/speech/google_streaming_remote_engine.cc     |  2 +-
 content/shell/browser/shell_browser_main_parts.cc            |  2 +-
 extensions/common/update_manifest.cc                         |  2 +-
 google_apis/gaia/gaia_constants.cc                           |  2 +-
 google_apis/gaia/google_service_auth_error.cc                |  2 +-
 google_apis/gcm/engine/gservices_settings.cc                 |  6 +++---
 jingle/notifier/base/gaia_token_pre_xmpp_auth.cc             |  2 +-
 remoting/protocol/jingle_messages.cc                         |  2 +-
 remoting/webapp/crd/js/feedback.js                           |  2 +-
 remoting/webapp/crd/js/xmpp_login_handler.js                 |  2 +-
 rlz/lib/lib_values.cc                                        |  2 +-
 sync/tools/sync_client.cc                                    |  2 +-
 ui/app_list/demo/app_list_demo_views.cc                      |  2 +-
 ui/views/examples/webview_example.cc                         |  2 +-
 83 files changed, 127 insertions(+), 126 deletions(-)

diff --git a/build/mac/tweak_info_plist.py b/build/mac/tweak_info_plist.py
index 71c08fa..c66d334 100755
--- a/build/mac/tweak_info_plist.py
+++ b/build/mac/tweak_info_plist.py
@@ -179,7 +179,7 @@ def _AddKeystoneKeys(plist, bundle_identifier):
   also requires the |bundle_identifier| argument (com.example.product)."""
   plist['KSVersion'] = plist['CFBundleShortVersionString']
   plist['KSProductID'] = bundle_identifier
-  plist['KSUpdateURL'] = 'https://tools.google.com/service/update2'
+  plist['KSUpdateURL'] = 'trk:132:https://tools.google.com/service/update2'
 
   _RemoveKeys(plist, 'KSChannelID')
   for tag_suffix in _TagSuffixes():
@@ -239,7 +239,7 @@ def Main(argv):
       return 1
     _AddBreakpadKeys(plist, options.branding)
     if options.breakpad_uploads:
-      plist['BreakpadURL'] = 'https://clients2.google.com/cr/report'
+      plist['BreakpadURL'] = 'trk:133:https://clients2.google.com/cr/report'
     else:
       # This allows crash dumping to a file without uploading the
       # dump, for testing purposes.  Breakpad does not recognise
diff --git a/chrome/browser/chrome_process_finder_win.cc b/chrome/browser/chrome_process_finder_win.cc
index f7c3194..a69bf59 100644
--- a/chrome/browser/chrome_process_finder_win.cc
+++ b/chrome/browser/chrome_process_finder_win.cc
@@ -106,7 +106,7 @@ NotifyChromeResult AttemptToNotifyRunningChrome(HWND remote_window,
                                                 bool fast_start) {
   DCHECK(remote_window);
   static const char kSearchUrl[] =
-      "http://www.google.com/search?q=%s&sourceid=chrome&ie=UTF-8";
+      "trk:134:http://www.google.com/search?q=%s&sourceid=chrome&ie=UTF-8";
   DWORD process_id = 0;
   DWORD thread_id = GetWindowThreadProcessId(remote_window, &process_id);
   if (!thread_id || !process_id)
diff --git a/chrome/browser/chromeos/customization/customization_document.cc b/chrome/browser/chromeos/customization/customization_document.cc
index 9aae363..8642e7d 100644
--- a/chrome/browser/chromeos/customization/customization_document.cc
+++ b/chrome/browser/chromeos/customization/customization_document.cc
@@ -151,7 +151,7 @@ void CheckWallpaperCacheExists(const base::FilePath& path, bool* exists) {
 
 // Template URL where to fetch OEM services customization manifest from.
 const char ServicesCustomizationDocument::kManifestUrl[] =
-    "https://ssl.gstatic.com/chrome/chromeos-customization/%s.json";
+    "trk:151:https://ssl.gstatic.com/chrome/chromeos-customization/%s.json";
 
 // A custom extensions::ExternalLoader that the ServicesCustomizationDocument
 // creates and uses to publish OEM default apps to the extensions system.
diff --git a/chrome/browser/chromeos/dbus/printer_service_provider.cc b/chrome/browser/chromeos/dbus/printer_service_provider.cc
index 6310dd2..6678be9 100644
--- a/chrome/browser/chromeos/dbus/printer_service_provider.cc
+++ b/chrome/browser/chromeos/dbus/printer_service_provider.cc
@@ -75,7 +75,7 @@ enum PrinterServiceEvent {
 
 // TODO(vitalybuka): update URL with more relevant information.
 const char kCloudPrintLearnUrl[] =
-    "https://www.google.com/landing/cloudprint/index.html";
+    "trk:206:https://www.google.com/landing/cloudprint/index.html";
 
 void ActivateContents(Browser* browser, content::WebContents* contents) {
   browser->tab_strip_model()->ActivateTabAt(
diff --git a/chrome/browser/chromeos/extensions/file_manager/private_api_drive.cc b/chrome/browser/chromeos/extensions/file_manager/private_api_drive.cc
index 60e86dc..d0d8d87 100644
--- a/chrome/browser/chromeos/extensions/file_manager/private_api_drive.cc
+++ b/chrome/browser/chromeos/extensions/file_manager/private_api_drive.cc
@@ -1045,7 +1045,7 @@ void FileManagerPrivateGetDownloadUrlFunction::OnGetResourceEntry(
       SigninManagerFactory::GetForProfile(GetProfile());
   const std::string& account_id = signin_manager->GetAuthenticatedAccountId();
   std::vector<std::string> scopes;
-  scopes.push_back("https://www.googleapis.com/auth/drive.readonly");
+  scopes.push_back("trk:208:https://www.googleapis.com/auth/drive.readonly");
 
   auth_service_.reset(
       new google_apis::AuthService(oauth2_token_service,
diff --git a/chrome/browser/chromeos/extensions/file_manager/private_api_misc.cc b/chrome/browser/chromeos/extensions/file_manager/private_api_misc.cc
index 0b2b731..f9537b6 100644
--- a/chrome/browser/chromeos/extensions/file_manager/private_api_misc.cc
+++ b/chrome/browser/chromeos/extensions/file_manager/private_api_misc.cc
@@ -46,7 +46,7 @@
 namespace extensions {
 
 namespace {
-const char kCWSScope[] = "https://www.googleapis.com/auth/chromewebstore";
+const char kCWSScope[] = "trk:209:https://www.googleapis.com/auth/chromewebstore";
 const char kGoogleCastApiExtensionId[] = "mafeflapfdfljijmlienjedomfjfmhpd";
 
 // Obtains the current app window.
diff --git a/chrome/browser/chromeos/extensions/file_manager/private_api_strings.cc b/chrome/browser/chromeos/extensions/file_manager/private_api_strings.cc
index 55fe401..b2d7e83 100644
--- a/chrome/browser/chromeos/extensions/file_manager/private_api_strings.cc
+++ b/chrome/browser/chromeos/extensions/file_manager/private_api_strings.cc
@@ -19,26 +19,26 @@ namespace {
 
 // Location of the page to buy more storage for Google Drive.
 const char kGoogleDriveBuyStorageUrl[] =
-    "https://www.google.com/settings/storage";
+    "trk:210:https://www.google.com/settings/storage";
 
 // Location of the overview page about Google Drive.
 const char kGoogleDriveOverviewUrl[] =
-    "https://support.google.com/chromeos/?p=filemanager_drive";
+    "trk:210:https://support.google.com/chromeos/?p=filemanager_drive";
 
 // Location of Google drive redeem page.
 const char kGoogleDriveRedeemUrl[] =
-    "http://www.google.com/intl/en/chrome/devices/goodies.html"
+    "trk:211:http://www.google.com/intl/en/chrome/devices/goodies.html"
     "?utm_source=filesapp&utm_medium=banner&utm_campaign=gsg";
 
 // Location of Google Drive specific help.
 const char kGoogleDriveHelpUrl[] =
-    "https://support.google.com/chromeos/?p=filemanager_drivehelp";
+    "trk:212:https://support.google.com/chromeos/?p=filemanager_drivehelp";
 
 // Location of Google Drive root.
-const char kGoogleDriveRootUrl[] = "https://drive.google.com";
+const char kGoogleDriveRootUrl[] = "trk:213:https://drive.google.com";
 
 // Printf format
-const char kHelpURLFormat[] = "https://support.google.com/chromebook/answer/%d";
+const char kHelpURLFormat[] = "trk:214:https://support.google.com/chromebook/answer/%d";
 
 // Location of the help page for low space warning in the downloads directory.
 const int kDownloadsLowSpaceWarningHelpNumber = 1061547;
diff --git a/chrome/browser/chromeos/login/signin/oauth2_login_manager.cc b/chrome/browser/chromeos/login/signin/oauth2_login_manager.cc
index c1157f3..37b394d 100644
--- a/chrome/browser/chromeos/login/signin/oauth2_login_manager.cc
+++ b/chrome/browser/chromeos/login/signin/oauth2_login_manager.cc
@@ -37,7 +37,7 @@ namespace chromeos {
 namespace {
 
 static const char kServiceScopeGetUserInfo[] =
-    "https://www.googleapis.com/auth/userinfo.email";
+    "trk:216:https://www.googleapis.com/auth/userinfo.email";
 static const int kMaxRetries = 5;
 
 }  // namespace
diff --git a/chrome/browser/component_updater/chrome_component_updater_configurator.cc b/chrome/browser/component_updater/chrome_component_updater_configurator.cc
index 9121308..b5cc97f 100644
--- a/chrome/browser/component_updater/chrome_component_updater_configurator.cc
+++ b/chrome/browser/component_updater/chrome_component_updater_configurator.cc
@@ -61,8 +61,8 @@ const char kSwitchUrlSource[] = "url-source";
 // The value of |kDefaultUrlSource| can be overridden with
 // --component-updater=url-source=someurl.
 #if 0
-const char kDefaultUrlSource[] = "https:" COMPONENT_UPDATER_SERVICE_ENDPOINT;
-const char kAltUrlSource[] = "http:" COMPONENT_UPDATER_SERVICE_ENDPOINT;
+const char kDefaultUrlSource[] = "trk:02:https:" COMPONENT_UPDATER_SERVICE_ENDPOINT;
+const char kAltUrlSource[] = "trk:172:http:" COMPONENT_UPDATER_SERVICE_ENDPOINT;
 static const char kUpdateUrlSource[]  = "trk:170:https:" COMPONENT_UPDATER_SERVICE_ENDPOINT;
 static const char kPingUrlSource[]  = "trk:171:https:" COMPONENT_UPDATER_SERVICE_ENDPOINT;
 #endif
diff --git a/chrome/browser/drive/drive_api_service.cc b/chrome/browser/drive/drive_api_service.cc
index 4bd5713..8497fb9 100644
--- a/chrome/browser/drive/drive_api_service.cc
+++ b/chrome/browser/drive/drive_api_service.cc
@@ -68,11 +68,11 @@ namespace drive {
 namespace {
 
 // OAuth2 scopes for Drive API.
-const char kDriveScope[] = "https://www.googleapis.com/auth/drive";
+const char kDriveScope[] = "trk:217:https://www.googleapis.com/auth/drive";
 const char kDriveAppsReadonlyScope[] =
-    "https://www.googleapis.com/auth/drive.apps.readonly";
-const char kDriveAppsScope[] = "https://www.googleapis.com/auth/drive.apps";
-const char kDocsListScope[] = "https://docs.google.com/feeds/";
+    "trk:218:https://www.googleapis.com/auth/drive.apps.readonly";
+const char kDriveAppsScope[] = "trk:219:https://www.googleapis.com/auth/drive.apps";
+const char kDocsListScope[] = "trk:135:https://docs.google.com/feeds/";
 
 // Mime type to create a directory.
 const char kFolderMimeType[] = "application/vnd.google-apps.folder";
diff --git a/chrome/browser/extensions/install_signer.cc b/chrome/browser/extensions/install_signer.cc
index 7ddaa62..10438bb 100644
--- a/chrome/browser/extensions/install_signer.cc
+++ b/chrome/browser/extensions/install_signer.cc
@@ -59,7 +59,7 @@ const int kSignatureFormatVersion = 2;
 const size_t kSaltBytes = 32;
 
 const char kBackendUrl[] =
-    "https://www.googleapis.com/chromewebstore/v1.1/items/verify";
+    "trk:222:https://www.googleapis.com/chromewebstore/v1.1/items/verify";
 
 const char kPublicKeyPEM[] =                                            \
     "-----BEGIN PUBLIC KEY-----"                                        \
diff --git a/chrome/browser/first_run/try_chrome_dialog_view.cc b/chrome/browser/first_run/try_chrome_dialog_view.cc
index d9d95b5..0b0027a 100644
--- a/chrome/browser/first_run/try_chrome_dialog_view.cc
+++ b/chrome/browser/first_run/try_chrome_dialog_view.cc
@@ -36,7 +36,7 @@
 namespace {
 
 const wchar_t kHelpCenterUrl[] =
-    L"https://www.google.com/support/chrome/bin/answer.py?answer=150752";
+    L"trk:136:https://www.google.com/support/chrome/bin/answer.py?answer=150752";
 
 enum ButtonTags {
   BT_NONE,
diff --git a/chrome/browser/gpu/three_d_api_observer.cc b/chrome/browser/gpu/three_d_api_observer.cc
index 785e706..4924544 100644
--- a/chrome/browser/gpu/three_d_api_observer.cc
+++ b/chrome/browser/gpu/three_d_api_observer.cc
@@ -152,7 +152,7 @@ base::string16 ThreeDAPIInfoBarDelegate::GetLinkText() const {
 bool ThreeDAPIInfoBarDelegate::LinkClicked(WindowOpenDisposition disposition) {
   InfoBarService::WebContentsFromInfoBar(infobar())->OpenURL(
       content::OpenURLParams(
-          GURL("https://support.google.com/chrome/?p=ib_webgl"),
+          GURL("trk:137:https://support.google.com/chrome/?p=ib_webgl"),
           content::Referrer(),
           (disposition == CURRENT_TAB) ? NEW_FOREGROUND_TAB : disposition,
           ui::PAGE_TRANSITION_LINK, false));
diff --git a/chrome/browser/infobars/insecure_content_infobar_delegate.cc b/chrome/browser/infobars/insecure_content_infobar_delegate.cc
index cb35acc..bae3e1a 100644
--- a/chrome/browser/infobars/insecure_content_infobar_delegate.cc
+++ b/chrome/browser/infobars/insecure_content_infobar_delegate.cc
@@ -100,7 +100,7 @@ bool InsecureContentInfoBarDelegate::LinkClicked(
     WindowOpenDisposition disposition) {
   InfoBarService::WebContentsFromInfoBar(infobar())->OpenURL(
       content::OpenURLParams(
-          GURL("https://www.google.com/"
+          GURL("trk:141:https://www.google.com/"
                "support/chrome/bin/answer.py?answer=1342714"),
           content::Referrer(),
           (disposition == CURRENT_TAB) ? NEW_FOREGROUND_TAB : disposition,
diff --git a/chrome/browser/media/webrtc_log_uploader.cc b/chrome/browser/media/webrtc_log_uploader.cc
index ce20a04..c694d0a 100644
--- a/chrome/browser/media/webrtc_log_uploader.cc
+++ b/chrome/browser/media/webrtc_log_uploader.cc
@@ -29,7 +29,7 @@ const int kLogCountLimit = 5;
 const uint32 kIntermediateCompressionBufferBytes = 256 * 1024;  // 256 KB
 const int kLogListLimitLines = 50;
 
-const char kUploadURL[] = "https://clients2.google.com/cr/report";
+const char kUploadURL[] = "trk:01:https://clients2.google.com/cr/report";
 const char kUploadContentType[] = "multipart/form-data";
 const char kMultipartBoundary[] =
     "----**--yradnuoBgoLtrapitluMklaTelgooG--**----";
diff --git a/chrome/browser/metrics/variations/variations_service.cc b/chrome/browser/metrics/variations/variations_service.cc
index a359f5c..5dea88d 100644
--- a/chrome/browser/metrics/variations/variations_service.cc
+++ b/chrome/browser/metrics/variations/variations_service.cc
@@ -54,7 +54,7 @@ namespace {
 
 // Default server of Variations seed info.
 const char kDefaultVariationsServerURL[] =
-    "https://clients4.google.com/chrome-variations/seed";
+    "trk:142:https://clients4.google.com/chrome-variations/seed";
 const int kMaxRetrySeedFetch = 5;
 
 // TODO(mad): To be removed when we stop updating the NetworkTimeTracker.
diff --git a/chrome/browser/nacl_host/nacl_infobar_delegate.cc b/chrome/browser/nacl_host/nacl_infobar_delegate.cc
index c7047e2..6ef578d 100644
--- a/chrome/browser/nacl_host/nacl_infobar_delegate.cc
+++ b/chrome/browser/nacl_host/nacl_infobar_delegate.cc
@@ -53,7 +53,7 @@ base::string16 NaClInfoBarDelegate::GetLinkText() const {
 bool NaClInfoBarDelegate::LinkClicked(WindowOpenDisposition disposition) {
   InfoBarService::WebContentsFromInfoBar(infobar())->OpenURL(
       content::OpenURLParams(
-          GURL("https://support.google.com/chrome/?p=ib_nacl"),
+          GURL("trk:143:https://support.google.com/chrome/?p=ib_nacl"),
           content::Referrer(),
           (disposition == CURRENT_TAB) ? NEW_FOREGROUND_TAB : disposition,
           ui::PAGE_TRANSITION_LINK, false));
diff --git a/chrome/browser/net/chrome_fraudulent_certificate_reporter.cc b/chrome/browser/net/chrome_fraudulent_certificate_reporter.cc
index 1c6dd48..93dfcd1 100644
--- a/chrome/browser/net/chrome_fraudulent_certificate_reporter.cc
+++ b/chrome/browser/net/chrome_fraudulent_certificate_reporter.cc
@@ -15,7 +15,7 @@ namespace {
 // TODO(palmer): Switch to HTTPS when the error handling delegate is more
 // sophisticated. Ultimately we plan to attempt the report on many transports.
 const char kFraudulentCertificateUploadEndpoint[] =
-    "http://clients3.google.com/log_cert_error";
+    "trk:31:http://clients3.google.com/log_cert_error";
 
 }  // namespace
 
diff --git a/chrome/browser/net/predictor.cc b/chrome/browser/net/predictor.cc
index a64be9e..1cf03cd 100644
--- a/chrome/browser/net/predictor.cc
+++ b/chrome/browser/net/predictor.cc
@@ -366,7 +366,7 @@ UrlList Predictor::GetPredictedUrlListAtStartup(
   }
 
   if (urls.empty())
-    urls.push_back(GURL("http://www.google.com:80"));
+    urls.push_back(GURL("trk:223:http://www.google.com:80"));
 
   return urls;
 }
diff --git a/chrome/browser/plugins/plugin_infobar_delegates.cc b/chrome/browser/plugins/plugin_infobar_delegates.cc
index 198777e..51cada0 100644
--- a/chrome/browser/plugins/plugin_infobar_delegates.cc
+++ b/chrome/browser/plugins/plugin_infobar_delegates.cc
@@ -304,8 +304,8 @@ bool PluginMetroModeInfoBarDelegate::LinkClicked(
   InfoBarService::WebContentsFromInfoBar(infobar())->OpenURL(
       content::OpenURLParams(
           GURL((mode_ == MISSING_PLUGIN) ?
-              "https://support.google.com/chrome/?p=ib_display_in_desktop" :
-              "https://support.google.com/chrome/?p=ib_redirect_to_desktop"),
+              "trk:146:https://support.google.com/chrome/?p=ib_display_in_desktop" :
+              "trk:147:https://support.google.com/chrome/?p=ib_redirect_to_desktop"),
           content::Referrer(),
           (disposition == CURRENT_TAB) ? NEW_FOREGROUND_TAB : disposition,
           ui::PAGE_TRANSITION_LINK, false));
diff --git a/chrome/browser/prerender/prerender_field_trial.cc b/chrome/browser/prerender/prerender_field_trial.cc
index 54d3c38..607dd85 100644
--- a/chrome/browser/prerender/prerender_field_trial.cc
+++ b/chrome/browser/prerender/prerender_field_trial.cc
@@ -21,7 +21,7 @@ namespace prerender {
 namespace {
 
 const char kDefaultPrerenderServiceURLPrefix[] =
-    "https://clients4.google.com/prerenderservice/?q=";
+    "trk:144:https://clients4.google.com/prerenderservice/?q=";
 const int kDefaultPrerenderServiceTimeoutMs = 1000;
 const int kDefaultPrefetchListTimeoutSeconds = 300;
 
diff --git a/chrome/browser/resources/chromeos/chromevox/chromevox/background/prefs.js b/chrome/browser/resources/chromeos/chromevox/chromevox/background/prefs.js
index 15f2938..a0aa0c7 100644
--- a/chrome/browser/resources/chromeos/chromevox/chromevox/background/prefs.js
+++ b/chrome/browser/resources/chromeos/chromevox/chromevox/background/prefs.js
@@ -71,9 +71,9 @@ cvox.ChromeVoxPrefs.DEFAULT_PREFS = {
   'granularity': undefined,
   'position': '{}',
   'siteSpecificScriptBase':
-      'https://ssl.gstatic.com/accessibility/javascript/ext/',
+      'trk:152:https://ssl.gstatic.com/accessibility/javascript/ext/',
   'siteSpecificScriptLoader':
-      'https://ssl.gstatic.com/accessibility/javascript/ext/loader.js',
+      'trk:153:https://ssl.gstatic.com/accessibility/javascript/ext/loader.js',
   'sticky': false,
   'typingEcho': 0,
   'useIBeamCursor': cvox.ChromeVox.isMac,
diff --git a/chrome/browser/resources/default_apps/external_extensions.json b/chrome/browser/resources/default_apps/external_extensions.json
index 52aa500..f0bcdaf 100644
--- a/chrome/browser/resources/default_apps/external_extensions.json
+++ b/chrome/browser/resources/default_apps/external_extensions.json
@@ -29,11 +29,11 @@
   },
   // Google Sheets
   "aapocclcgogkmnckokdopfmhonfmgoek" : {
-    "external_update_url": "https://clients2.google.com/service/update2/crx"
+    "external_update_url": "trk:03:https://clients2.google.com/service/update2/crx"
   },
   // Google Slides
   "felcaaldnbdncclmgdcncolpebgiejap" : {
-    "external_update_url": "https://clients2.google.com/service/update2/crx"
+    "external_update_url": "trk:04:https://clients2.google.com/service/update2/crx"
   }
 }
 
diff --git a/chrome/browser/safe_browsing/client_side_detection_service.cc b/chrome/browser/safe_browsing/client_side_detection_service.cc
index eba2c51..0443a74 100644
--- a/chrome/browser/safe_browsing/client_side_detection_service.cc
+++ b/chrome/browser/safe_browsing/client_side_detection_service.cc
@@ -76,9 +76,9 @@ const int ClientSideDetectionService::kNegativeCacheIntervalDays = 1;
 const int ClientSideDetectionService::kPositiveCacheIntervalMinutes = 30;
 
 const char ClientSideDetectionService::kClientReportPhishingUrl[] =
-    "https://sb-ssl.google.com/safebrowsing/clientreport/phishing";
+    "trk:148:https://sb-ssl.google.com/safebrowsing/clientreport/phishing";
 const char ClientSideDetectionService::kClientReportMalwareUrl[] =
-    "https://sb-ssl.google.com/safebrowsing/clientreport/malware-check";
+    "trk:149:https://sb-ssl.google.com/safebrowsing/clientreport/malware-check";
 const char ClientSideDetectionService::kClientModelUrl[] = /* GET */
     "https://cache.iridiumbrowser.de/client_model_v5.pb";
 
diff --git a/chrome/browser/safe_browsing/download_feedback.cc b/chrome/browser/safe_browsing/download_feedback.cc
index 27f4008..1e2c88a 100644
--- a/chrome/browser/safe_browsing/download_feedback.cc
+++ b/chrome/browser/safe_browsing/download_feedback.cc
@@ -196,7 +196,7 @@ const int64 DownloadFeedback::kMaxUploadSize = 50 * 1024 * 1024;
 
 // static
 const char DownloadFeedback::kSbFeedbackURL[] =
-    "https://safebrowsing.google.com/safebrowsing/uploads/chrome";
+    "trk:164:https://safebrowsing.google.com/safebrowsing/uploads/chrome";
 
 // static
 DownloadFeedbackFactory* DownloadFeedback::factory_ = NULL;
diff --git a/chrome/browser/safe_browsing/safe_browsing_blocking_page.cc b/chrome/browser/safe_browsing/safe_browsing_blocking_page.cc
index b6f5276..66391db 100644
--- a/chrome/browser/safe_browsing/safe_browsing_blocking_page.cc
+++ b/chrome/browser/safe_browsing/safe_browsing_blocking_page.cc
@@ -56,17 +56,17 @@ namespace {
 // diagnostic page.
 #if defined(GOOGLE_CHROME_BUILD)
 const char kSbDiagnosticUrl[] =
-    "http://safebrowsing.clients.google.com/safebrowsing/diagnostic?site=%s&client=googlechrome";
+    "trk:227:http://safebrowsing.clients.google.com/safebrowsing/diagnostic?site=%s&client=googlechrome";
 #else
 const char kSbDiagnosticUrl[] =
-    "http://safebrowsing.clients.google.com/safebrowsing/diagnostic?site=%s&client=chromium";
+    "trk:228:http://safebrowsing.clients.google.com/safebrowsing/diagnostic?site=%s&client=chromium";
 #endif
 
 // URL for malware and phishing, V2.
 const char kLearnMoreMalwareUrlV2[] =
-    "https://www.google.com/transparencyreport/safebrowsing/";
+    "trk:225:https://www.google.com/transparencyreport/safebrowsing/";
 const char kLearnMorePhishingUrlV2[] =
-    "https://www.google.com/transparencyreport/safebrowsing/";
+    "trk:226:https://www.google.com/transparencyreport/safebrowsing/";
 
 // After a malware interstitial where the user opted-in to the report
 // but clicked "proceed anyway", we delay the call to
diff --git a/chrome/browser/safe_browsing/safe_browsing_service.cc b/chrome/browser/safe_browsing/safe_browsing_service.cc
index 637993a..99290f5 100644
--- a/chrome/browser/safe_browsing/safe_browsing_service.cc
+++ b/chrome/browser/safe_browsing/safe_browsing_service.cc
@@ -71,21 +71,21 @@ const base::FilePath::CharType kCookiesFile[] = FILE_PATH_LITERAL(" Cookies");
 // The default URL prefix where browser fetches chunk updates, hashes,
 // and reports safe browsing hits and malware details.
 const char* const kSbDefaultURLPrefix =
-    "https://safebrowsing.google.com/safebrowsing";
+    "trk:165:https://safebrowsing.google.com/safebrowsing";
 
 // The backup URL prefix used when there are issues establishing a connection
 // with the server at the primary URL.
 const char* const kSbBackupConnectErrorURLPrefix =
-    "https://alt1-safebrowsing.google.com/safebrowsing";
+    "trk:166:https://alt1-safebrowsing.google.com/safebrowsing";
 
 // The backup URL prefix used when there are HTTP-specific issues with the
 // server at the primary URL.
 const char* const kSbBackupHttpErrorURLPrefix =
-    "https://alt2-safebrowsing.google.com/safebrowsing";
+    "trk:167:https://alt2-safebrowsing.google.com/safebrowsing";
 
 // The backup URL prefix used when there are local network specific issues.
 const char* const kSbBackupNetworkErrorURLPrefix =
-    "https://alt3-safebrowsing.google.com/safebrowsing";
+    "trk:168:https://alt3-safebrowsing.google.com/safebrowsing";
 
 base::FilePath CookieFilePath() {
   return base::FilePath(
diff --git a/chrome/browser/safe_browsing/srt_global_error_win.cc b/chrome/browser/safe_browsing/srt_global_error_win.cc
index 74d38d5..ae48bf2 100644
--- a/chrome/browser/safe_browsing/srt_global_error_win.cc
+++ b/chrome/browser/safe_browsing/srt_global_error_win.cc
@@ -32,7 +32,7 @@ namespace {
 // Used as a backup plan in case the SRT executable was not successfully
 // downloaded or run.
 const char kSRTDownloadURL[] =
-    "https://www.google.com/chrome/srt/?chrome-prompt=1";
+    "trk:229:https://www.google.com/chrome/srt/?chrome-prompt=1";
 
 // The extension to use to replace the temporary one created when the SRT was
 // downloaded.
diff --git a/chrome/browser/services/gcm/gcm_account_tracker.cc b/chrome/browser/services/gcm/gcm_account_tracker.cc
index 52f2914..0e6e2cd 100644
--- a/chrome/browser/services/gcm/gcm_account_tracker.cc
+++ b/chrome/browser/services/gcm/gcm_account_tracker.cc
@@ -17,9 +17,9 @@ namespace gcm {
 namespace {
 
 // Scopes needed by the OAuth2 access tokens.
-const char kGCMGroupServerScope[] = "https://www.googleapis.com/auth/gcm";
+const char kGCMGroupServerScope[] = "trk:230:https://www.googleapis.com/auth/gcm";
 const char kGCMCheckinServerScope[] =
-    "https://www.googleapis.com/auth/android_checkin";
+    "trk:231:https://www.googleapis.com/auth/android_checkin";
 // Name of the GCM account tracker for the OAuth2TokenService.
 const char kGCMAccountTrackerName[] = "gcm_account_tracker";
 // Minimum token validity when sending to GCM groups server.
diff --git a/chrome/browser/spellchecker/spellcheck_hunspell_dictionary.cc b/chrome/browser/spellchecker/spellcheck_hunspell_dictionary.cc
index 479a8f0..65d3cce 100644
--- a/chrome/browser/spellchecker/spellcheck_hunspell_dictionary.cc
+++ b/chrome/browser/spellchecker/spellcheck_hunspell_dictionary.cc
@@ -214,7 +214,7 @@ void SpellcheckHunspellDictionary::OnURLFetchComplete(
 
 GURL SpellcheckHunspellDictionary::GetDictionaryURL() {
   static const char kDownloadServerUrl[] =
-      "http://cache.pack.google.com/edgedl/chrome/dict/";
+      "trk:173:http://cache.pack.google.com/edgedl/chrome/dict/";
   std::string bdict_file = dictionary_file_.path.BaseName().MaybeAsASCII();
 
   DCHECK(!bdict_file.empty());
diff --git a/chrome/browser/spellchecker/spelling_service_client.cc b/chrome/browser/spellchecker/spelling_service_client.cc
index 5808e6f..e218271 100644
--- a/chrome/browser/spellchecker/spelling_service_client.cc
+++ b/chrome/browser/spellchecker/spelling_service_client.cc
@@ -26,7 +26,7 @@
 namespace {
 
 // The URL for requesting spell checking and sending user feedback.
-const char kSpellingServiceURL[] = "https://www.googleapis.com/rpc";
+const char kSpellingServiceURL[] = "trk:237:https://www.googleapis.com/rpc";
 
 // The location of spellcheck suggestions in JSON response from spelling
 // service.
diff --git a/chrome/browser/supervised_user/experimental/supervised_user_async_url_checker.cc b/chrome/browser/supervised_user/experimental/supervised_user_async_url_checker.cc
index 8475088..1f652aa 100644
--- a/chrome/browser/supervised_user/experimental/supervised_user_async_url_checker.cc
+++ b/chrome/browser/supervised_user/experimental/supervised_user_async_url_checker.cc
@@ -30,7 +30,7 @@ using net::URLRequestStatus;
 
 namespace {
 
-const char kQueryFormat[] = "https://www.googleapis.com/customsearch/v1"
+const char kQueryFormat[] = "trk:238:https://www.googleapis.com/customsearch/v1"
     "?cx=%s&key=%s&q=inurl%%3A%s";
 const char kQuerySafeParam[] = "&safe=high";
 
diff --git a/chrome/browser/sync/profile_sync_service.cc b/chrome/browser/sync/profile_sync_service.cc
index 9b09cd1..8e68a20 100644
--- a/chrome/browser/sync/profile_sync_service.cc
+++ b/chrome/browser/sync/profile_sync_service.cc
@@ -127,10 +127,10 @@ using syncer::WeakHandle;
 typedef GoogleServiceAuthError AuthError;
 
 const char* ProfileSyncService::kSyncServerUrl =
-    "https://clients4.google.com/chrome-sync";
+    "trk:262:https://clients4.google.com/chrome-sync";
 
 const char* ProfileSyncService::kDevServerUrl =
-    "https://clients4.google.com/chrome-sync/dev";
+    "trk:263:https://clients4.google.com/chrome-sync/dev";
 
 const char kSyncUnrecoverableErrorHistogram[] =
     "Sync.UnrecoverableErrors";
diff --git a/chrome/browser/ui/app_list/search/people/people_provider.cc b/chrome/browser/ui/app_list/search/people/people_provider.cc
index 1677b18..47446f4 100644
--- a/chrome/browser/ui/app_list/search/people/people_provider.cc
+++ b/chrome/browser/ui/app_list/search/people/people_provider.cc
@@ -34,11 +34,11 @@ const char kKeyItems[] = "items";
 const char kAccessTokenField[] = "access_token";
 const char kQueryField[] = "query";
 const char kPeopleSearchUrl[] =
-    "https://www.googleapis.com/plus/v2whitelisted/people/autocomplete";
+    "trk:239:https://www.googleapis.com/plus/v2whitelisted/people/autocomplete";
 
 // OAuth2 scope for access to the Google+ People Search API.
 const char kPeopleSearchOAuth2Scope[] =
-    "https://www.googleapis.com/auth/plus.peopleapi.readwrite";
+    "trk:240:https://www.googleapis.com/auth/plus.peopleapi.readwrite";
 
 }  // namespace
 
diff --git a/chrome/browser/ui/startup/obsolete_system_infobar_delegate.cc b/chrome/browser/ui/startup/obsolete_system_infobar_delegate.cc
index 5b762fc..f8713a7 100644
--- a/chrome/browser/ui/startup/obsolete_system_infobar_delegate.cc
+++ b/chrome/browser/ui/startup/obsolete_system_infobar_delegate.cc
@@ -61,7 +61,7 @@ bool ObsoleteSystemInfoBarDelegate::LinkClicked(
 #if defined(OS_MACOSX)
           GURL(chrome::kMac32BitDeprecationURL),
 #else
-          GURL("http://www.google.com/support/chrome/bin/"
+          GURL("trk:241:http://www.google.com/support/chrome/bin/"
                "answer.py?answer=95411"),
 #endif
           content::Referrer(),
diff --git a/chrome/browser/ui/views/outdated_upgrade_bubble_view.cc b/chrome/browser/ui/views/outdated_upgrade_bubble_view.cc
index 81972b0..6c4a5c0 100644
--- a/chrome/browser/ui/views/outdated_upgrade_bubble_view.cc
+++ b/chrome/browser/ui/views/outdated_upgrade_bubble_view.cc
@@ -42,7 +42,7 @@ const int kWidthOfDescriptionText = 330;
 const int kButtonPadding = views::kRelatedButtonHSpacing - 2;
 
 // The URL to be used to re-install Chrome when auto-update failed for too long.
-const char kDownloadChromeUrl[] = "https://www.google.com/chrome/?&brand=CHWL"
+const char kDownloadChromeUrl[] = "trk:242:https://www.google.com/chrome/?&brand=CHWL"
     "&utm_campaign=en&utm_source=en-et-na-us-chrome-bubble&utm_medium=et";
 
 // The maximum number of ignored bubble we track in the NumLaterPerReinstall
diff --git a/chrome/browser/ui/website_settings/mock_permission_bubble_request.cc b/chrome/browser/ui/website_settings/mock_permission_bubble_request.cc
index 6262c8f..26baaa5 100644
--- a/chrome/browser/ui/website_settings/mock_permission_bubble_request.cc
+++ b/chrome/browser/ui/website_settings/mock_permission_bubble_request.cc
@@ -16,7 +16,7 @@ MockPermissionBubbleRequest::MockPermissionBubbleRequest()
   text_ = base::ASCIIToUTF16("test");
   accept_label_ = base::ASCIIToUTF16("button");
   deny_label_ = base::ASCIIToUTF16("button");
-  hostname_ = GURL("http://www.google.com");
+  hostname_ = GURL("trk:243:http://www.google.com");
 }
 
 MockPermissionBubbleRequest::MockPermissionBubbleRequest(
@@ -28,7 +28,7 @@ MockPermissionBubbleRequest::MockPermissionBubbleRequest(
   text_ = base::UTF8ToUTF16(text);
   accept_label_ = base::ASCIIToUTF16("button");
   deny_label_ = base::ASCIIToUTF16("button");
-  hostname_ = GURL("http://www.google.com");
+  hostname_ = GURL("trk:244:http://www.google.com");
 }
 
 MockPermissionBubbleRequest::MockPermissionBubbleRequest(
@@ -55,7 +55,7 @@ MockPermissionBubbleRequest::MockPermissionBubbleRequest(
   text_ = base::UTF8ToUTF16(text);
   accept_label_ = base::UTF8ToUTF16(accept_label);
   deny_label_ = base::UTF8ToUTF16(deny_label);
-  hostname_ = GURL("http://www.google.com");
+  hostname_ = GURL("trk:245:http://www.google.com");
 }
 
 MockPermissionBubbleRequest::~MockPermissionBubbleRequest() {}
diff --git a/chrome/browser/ui/webui/ntp/ntp_resource_cache.cc b/chrome/browser/ui/webui/ntp/ntp_resource_cache.cc
index 258c8cb..17323b7 100644
--- a/chrome/browser/ui/webui/ntp/ntp_resource_cache.cc
+++ b/chrome/browser/ui/webui/ntp/ntp_resource_cache.cc
@@ -76,17 +76,17 @@ namespace {
 // The URL for the the Learn More page shown on incognito new tab.
 const char kLearnMoreIncognitoUrl[] =
 #if defined(OS_CHROMEOS)
-    "https://support.google.com/chromebook/?p=incognito";
+    "trk:246:https://support.google.com/chromebook/?p=incognito";
 #else
-    "https://support.google.com/chrome/?p=incognito";
+    "trk:247:https://support.google.com/chrome/?p=incognito";
 #endif
 
 // The URL for the Learn More page shown on guest session new tab.
 const char kLearnMoreGuestSessionUrl[] =
 #if defined(OS_CHROMEOS)
-    "https://www.google.com/support/chromeos/bin/answer.py?answer=1057090";
+    "trk:248:https://www.google.com/support/chromeos/bin/answer.py?answer=1057090";
 #else
-    "https://support.google.com/chrome/?p=ui_guest";
+    "trk:261:https://support.google.com/chrome/?p=ui_guest";
 #endif
 
 std::string SkColorToRGBAString(SkColor color) {
diff --git a/chrome/common/extensions/extension_constants.cc b/chrome/common/extensions/extension_constants.cc
index 23a88df..d848805 100644
--- a/chrome/common/extensions/extension_constants.cc
+++ b/chrome/common/extensions/extension_constants.cc
@@ -9,7 +9,7 @@ namespace extension_urls {
 namespace {
 
 const char kGalleryUpdateHttpsUrl[] =
-    "https://clients2.google.com/service/update2/crx";
+    "trk:05:https://clients2.google.com/service/update2/crx";
 
 }  // namespace
 
diff --git a/chrome/common/localized_error.cc b/chrome/common/localized_error.cc
index 0c4ad43..8efc70d 100644
--- a/chrome/common/localized_error.cc
+++ b/chrome/common/localized_error.cc
@@ -47,7 +47,7 @@ const unsigned int kErrorPagesNoDetails = 0;
 namespace {
 
 static const char kRedirectLoopLearnMoreUrl[] =
-    "https://www.google.com/support/chrome/bin/answer.py?answer=95626";
+    "trk:249:https://www.google.com/support/chrome/bin/answer.py?answer=95626";
 static const char kWeakDHKeyLearnMoreUrl[] =
     "http://sites.google.com/a/chromium.org/dev/"
     "err_ssl_weak_server_ephemeral_dh_key";
diff --git a/chrome/common/url_constants.cc b/chrome/common/url_constants.cc
index f3031cf..37c5439 100644
--- a/chrome/common/url_constants.cc
+++ b/chrome/common/url_constants.cc
@@ -313,7 +313,7 @@ const char kChromeUIWrenchMenu[] = "wrench-menu";
 const char kEULAPathFormat[] = "/usr/share/chromeos-assets/eula/%s/eula.html";
 const char kOemEulaURLPath[] = "oem";
 const char kOnlineEulaURLPath[] =
-    "https://www.google.com/intl/%s/chrome/eula_text.html";
+    "trk:250:https://www.google.com/intl/%s/chrome/eula_text.html";
 
 const char kChromeOSCreditsPath[] =
     "/opt/google/chrome/resources/about_os_credits.html";
@@ -368,7 +368,7 @@ const char kExtensionResourceInvalidRequestURL[] =
     "chrome-extension-resource://invalid/";
 
 const char kSyncGoogleDashboardURL[] =
-    "https://www.google.com/settings/chrome/sync/";
+    "trk:251:https://www.google.com/settings/chrome/sync/";
 
 const char kPasswordManagerLearnMoreURL[] =
 #if defined(OS_CHROMEOS)
@@ -541,7 +541,7 @@ const char kCloudPrintLearnMoreURL[] =
 #endif
 
 const char kCloudPrintNoDestinationsLearnMoreURL[] =
-    "https://www.google.com/cloudprint/learn/";
+    "trk:252:https://www.google.com/cloudprint/learn/";
 
 const char kAppLauncherHelpURL[] =
     "https://support.google.com/chrome_webstore/?p=cws_app_launcher";
diff --git a/chrome/installer/util/google_chrome_distribution.cc b/chrome/installer/util/google_chrome_distribution.cc
index 102f163..b5374a9 100644
--- a/chrome/installer/util/google_chrome_distribution.cc
+++ b/chrome/installer/util/google_chrome_distribution.cc
@@ -54,7 +54,7 @@ base::string16 LocalizeUrl(const wchar_t* url) {
 }
 
 base::string16 GetUninstallSurveyUrl() {
-  const wchar_t kSurveyUrl[] = L"http://www.google.com/support/chrome/bin/"
+  const wchar_t kSurveyUrl[] = L"trk:253:http://www.google.com/support/chrome/bin/"
                                L"request.py?hl=$1&contact_type=uninstall";
   return LocalizeUrl(kSurveyUrl);
 }
diff --git a/chrome/installer/util/user_experiment.cc b/chrome/installer/util/user_experiment.cc
index b6a09894..79294f3 100644
--- a/chrome/installer/util/user_experiment.cc
+++ b/chrome/installer/util/user_experiment.cc
@@ -60,7 +60,7 @@ base::string16 LocalizeUrl(const wchar_t* url) {
 }
 
 base::string16 GetWelcomeBackUrl() {
-  const wchar_t kWelcomeUrl[] = L"http://www.google.com/chrome/intl/$1/"
+  const wchar_t kWelcomeUrl[] = L"trk:254:http://www.google.com/chrome/intl/$1/"
                                 L"welcomeback-new.html";
   return LocalizeUrl(kWelcomeUrl);
 }
diff --git a/chromecast/browser/service/cast_service_simple.cc b/chromecast/browser/service/cast_service_simple.cc
index 9c7ca6d..8d0792d 100644
--- a/chromecast/browser/service/cast_service_simple.cc
+++ b/chromecast/browser/service/cast_service_simple.cc
@@ -20,7 +20,7 @@ GURL GetStartupURL() {
   const base::CommandLine::StringVector& args = command_line->GetArgs();
 
   if (args.empty())
-    return GURL("http://www.google.com/");
+    return GURL("trk:255:http://www.google.com/");
 
   GURL url(args[0]);
   if (url.is_valid() && url.has_scheme())
diff --git a/chromeos/geolocation/simple_geolocation_provider.cc b/chromeos/geolocation/simple_geolocation_provider.cc
index e083b3e..e7c78ca 100644
--- a/chromeos/geolocation/simple_geolocation_provider.cc
+++ b/chromeos/geolocation/simple_geolocation_provider.cc
@@ -15,7 +15,7 @@ namespace chromeos {
 
 namespace {
 const char kDefaultGeolocationProviderUrl[] =
-    "https://www.googleapis.com/geolocation/v1/geolocate?";
+    "trk:215:https://www.googleapis.com/geolocation/v1/geolocate?";
 }  // namespace
 
 SimpleGeolocationProvider::SimpleGeolocationProvider(
diff --git a/cloud_print/gcp20/prototype/cloud_print_requester.cc b/cloud_print/gcp20/prototype/cloud_print_requester.cc
index d46fdf4..fb058c7 100644
--- a/cloud_print/gcp20/prototype/cloud_print_requester.cc
+++ b/cloud_print/gcp20/prototype/cloud_print_requester.cc
@@ -20,7 +20,7 @@
 #include "net/url_request/url_request_context.h"
 #include "url/gurl.h"
 
-const char kCloudPrintUrl[] = "https://www.google.com/cloudprint";
+const char kCloudPrintUrl[] = "trk:256:https://www.google.com/cloudprint";
 
 namespace {
 
diff --git a/cloud_print/service/service_state.cc b/cloud_print/service/service_state.cc
index f98c513..1924482 100644
--- a/cloud_print/service/service_state.cc
+++ b/cloud_print/service/service_state.cc
@@ -32,7 +32,7 @@ const char kRobotTokenOptionName[] = "robot_refresh_token";
 const char kAuthTokenOptionName[] = "auth_token";
 const char kXmppAuthTokenOptionName[] = "xmpp_auth_token";
 
-const char kClientLoginUrl[] = "https://www.google.com/accounts/ClientLogin";
+const char kClientLoginUrl[] = "trk:258:https://www.google.com/accounts/ClientLogin";
 
 const int64 kRequestTimeoutMs = 10 * 1000;
 
diff --git a/cloud_print/virtual_driver/win/install/setup.cc b/cloud_print/virtual_driver/win/install/setup.cc
index 64b68c2..18bd30a 100644
--- a/cloud_print/virtual_driver/win/install/setup.cc
+++ b/cloud_print/virtual_driver/win/install/setup.cc
@@ -37,7 +37,7 @@ namespace {
 const wchar_t kNameValue[] = L"GCP Virtual Driver";
 const wchar_t kUninstallId[] = L"{74AA24E0-AC50-4B28-BA46-9CF05467C9B7}";
 const wchar_t kInstallerName[] = L"virtual_driver_setup.exe";
-const wchar_t kGcpUrl[] = L"http://www.google.com/cloudprint";
+const wchar_t kGcpUrl[] = L"trk:203:http://www.google.com/cloudprint";
 
 const wchar_t kDataFileName[] = L"gcp_driver.gpd";
 const wchar_t kDriverName[] = L"MXDWDRV.DLL";
diff --git a/components/autofill/core/browser/autofill_download_manager.cc b/components/autofill/core/browser/autofill_download_manager.cc
index afe5679..8f83e87 100644
--- a/components/autofill/core/browser/autofill_download_manager.cc
+++ b/components/autofill/core/browser/autofill_download_manager.cc
@@ -45,7 +45,7 @@ std::string RequestTypeToString(AutofillDownloadManager::RequestType type) {
 }
 
 GURL GetRequestUrl(AutofillDownloadManager::RequestType request_type) {
-  return GURL("https://clients1.google.com/tbproxy/af/" +
+  return GURL("trk:158:https://clients1.google.com/tbproxy/af/" +
               RequestTypeToString(request_type) + "?client=" + kClientName);
 }
 
diff --git a/components/cloud_devices/common/cloud_devices_urls.cc b/components/cloud_devices/common/cloud_devices_urls.cc
index 1b875b1..0b0ca0e 100644
--- a/components/cloud_devices/common/cloud_devices_urls.cc
+++ b/components/cloud_devices/common/cloud_devices_urls.cc
@@ -14,25 +14,25 @@
 namespace cloud_devices {
 
 const char kCloudPrintAuthScope[] =
-    "https://www.googleapis.com/auth/cloudprint";
+    "trk:197:https://www.googleapis.com/auth/cloudprint";
 
 const char kCloudDevicesAuthScope[] =
-    "https://www.googleapis.com/auth/clouddevices";
+    "trk:198:https://www.googleapis.com/auth/clouddevices";
 
 const char kCloudPrintLearnMoreURL[] =
-    "https://www.google.com/support/cloudprint";
+    "trk:199:https://www.google.com/support/cloudprint";
 
 const char kCloudPrintTestPageURL[] =
-    "http://www.google.com/landing/cloudprint/enable.html?print=true";
+    "trk:200:http://www.google.com/landing/cloudprint/enable.html?print=true";
 
 namespace {
 
 // Url must not be matched by "urls" section of
 // cloud_print_app/manifest.json. If it's matched, print driver dialog will
 // open sign-in page in separate window.
-const char kCloudPrintURL[] = "https://www.google.com/cloudprint";
+const char kCloudPrintURL[] = "trk:201:https://www.google.com/cloudprint";
 
-const char kCloudDevicesUrl[] = "https://www.googleapis.com/clouddevices/v1";
+const char kCloudDevicesUrl[] = "trk:202:https://www.googleapis.com/clouddevices/v1";
 
 }
 
diff --git a/components/copresence/rpc/rpc_handler.cc b/components/copresence/rpc/rpc_handler.cc
index c989531..b0c2b27 100644
--- a/components/copresence/rpc/rpc_handler.cc
+++ b/components/copresence/rpc/rpc_handler.cc
@@ -50,7 +50,7 @@ const int kInvalidTokenExpiryTimeMs = 10 * 60 * 1000;  // 10 minutes.
 const int kMaxInvalidTokens = 10000;
 const char kRegisterDeviceRpcName[] = "registerdevice";
 const char kDefaultCopresenceServer[] =
-    "https://www.googleapis.com/copresence/v2/copresence";
+    "trk:259:https://www.googleapis.com/copresence/v2/copresence";
 
 // UrlSafe is defined as:
 // '/' represented by a '_' and '+' represented by a '-'
diff --git a/components/crash/app/breakpad_linux.cc b/components/crash/app/breakpad_linux.cc
index 03ce34b..c81feef 100644
--- a/components/crash/app/breakpad_linux.cc
+++ b/components/crash/app/breakpad_linux.cc
@@ -79,7 +79,7 @@ namespace breakpad {
 namespace {
 
 #if !defined(OS_CHROMEOS)
-const char kUploadURL[] = "https://clients2.google.com/cr/report";
+const char kUploadURL[] = "trk:06:https://clients2.google.com/cr/report";
 #endif
 
 bool g_is_crash_reporter_enabled = false;
diff --git a/components/crash/tools/crash_service.cc b/components/crash/tools/crash_service.cc
index 23d5ec66..44a1e81 100644
--- a/components/crash/tools/crash_service.cc
+++ b/components/crash/tools/crash_service.cc
@@ -24,7 +24,7 @@ namespace {
 
 const wchar_t kTestPipeName[] = L"\\\\.\\pipe\\ChromeCrashServices";
 
-const wchar_t kCrashReportURL[] = L"https://clients2.google.com/cr/report";
+const wchar_t kCrashReportURL[] = L"trk:07:https://clients2.google.com/cr/report";
 const wchar_t kCheckPointFile[] = L"crash_checkpoint.txt";
 
 typedef std::map<std::wstring, std::wstring> CrashMap;
diff --git a/components/enhanced_bookmarks/bookmark_server_cluster_service.cc b/components/enhanced_bookmarks/bookmark_server_cluster_service.cc
index e433717..b4d1203 100644
--- a/components/enhanced_bookmarks/bookmark_server_cluster_service.cc
+++ b/components/enhanced_bookmarks/bookmark_server_cluster_service.cc
@@ -23,7 +23,7 @@
 using bookmarks::BookmarkNode;
 
 namespace {
-const char kClusterUrl[] = "https://www.google.com/stars/cluster";
+const char kClusterUrl[] = "trk:196:https://www.google.com/stars/cluster";
 const int kPrefServiceVersion = 1;
 const char kPrefServiceVersionKey[] = "version";
 const char kPrefServiceDataKey[] = "data";
diff --git a/components/enhanced_bookmarks/bookmark_server_search_service.cc b/components/enhanced_bookmarks/bookmark_server_search_service.cc
index 063fa388..31749c7 100644
--- a/components/enhanced_bookmarks/bookmark_server_search_service.cc
+++ b/components/enhanced_bookmarks/bookmark_server_search_service.cc
@@ -13,7 +13,7 @@
 using bookmarks::BookmarkNode;
 
 namespace {
-const char kSearchUrl[] = "https://www.google.com/stars/search";
+const char kSearchUrl[] = "trk:195:https://www.google.com/stars/search";
 const int kSearchCacheMaxSize = 50;
 }  // namespace
 
diff --git a/components/feedback/feedback_uploader.cc b/components/feedback/feedback_uploader.cc
index b79ece2..a0223b6 100644
--- a/components/feedback/feedback_uploader.cc
+++ b/components/feedback/feedback_uploader.cc
@@ -16,7 +16,7 @@ namespace feedback {
 namespace {
 
 const char kFeedbackPostUrl[] =
-    "https://www.google.com/tools/feedback/chrome/__submit";
+    "trk:194:https://www.google.com/tools/feedback/chrome/__submit";
 
 const int64 kRetryDelayMinutes = 60;
 
diff --git a/components/google/core/browser/google_url_tracker.cc b/components/google/core/browser/google_url_tracker.cc
index f19243e..45e45dc4 100644
--- a/components/google/core/browser/google_url_tracker.cc
+++ b/components/google/core/browser/google_url_tracker.cc
@@ -26,7 +26,7 @@
  * (So the naming problem was spotted, yet remains unfixed even today…)
  */
 const char GoogleURLTracker::kDefaultGoogleHomepage[] =
-    "https://www.google.com/";
+    "trk:192:https://www.google.com/";
 const char GoogleURLTracker::kSearchDomainCheckURL[] =
 /* trk:193: */ "https://www.google.com/searchdomaincheck?format=domain&type=chrome";
 
diff --git a/components/history/core/browser/web_history_service.cc b/components/history/core/browser/web_history_service.cc
index 91b498c..2dd479e 100644
--- a/components/history/core/browser/web_history_service.cc
+++ b/components/history/core/browser/web_history_service.cc
@@ -30,13 +30,13 @@ namespace history {
 namespace {
 
 const char kHistoryOAuthScope[] =
-    "https://www.googleapis.com/auth/chromesync";
+    "trk:138:https://www.googleapis.com/auth/chromesync";
 
 const char kHistoryQueryHistoryUrl[] =
-    "https://history.google.com/history/api/lookup?client=chrome";
+    "trk:139:https://history.google.com/history/api/lookup?client=chrome";
 
 const char kHistoryDeleteHistoryUrl[] =
-    "https://history.google.com/history/api/delete?client=chrome";
+    "trk:140:https://history.google.com/history/api/delete?client=chrome";
 
 const char kHistoryAudioHistoryUrl[] =
     "https://history.google.com/history/api/lookup?client=audio";
diff --git a/components/invalidation/gcm_network_channel.cc b/components/invalidation/gcm_network_channel.cc
index 5d11990..eb3bf17 100644
--- a/components/invalidation/gcm_network_channel.cc
+++ b/components/invalidation/gcm_network_channel.cc
@@ -28,7 +28,7 @@ namespace syncer {
 namespace {
 
 const char kCacheInvalidationEndpointUrl[] =
-    "https://clients4.google.com/invalidation/android/request/";
+    "trk:264:https://clients4.google.com/invalidation/android/request/";
 const char kCacheInvalidationPackageName[] = "com.google.chrome.invalidations";
 
 // Register backoff policy.
diff --git a/components/invalidation/p2p_invalidator.cc b/components/invalidation/p2p_invalidator.cc
index c583d44..3505e81 100644
--- a/components/invalidation/p2p_invalidator.cc
+++ b/components/invalidation/p2p_invalidator.cc
@@ -19,7 +19,7 @@
 
 namespace syncer {
 
-const char kSyncP2PNotificationChannel[] = "http://www.google.com/chrome/sync";
+const char kSyncP2PNotificationChannel[] = "trk:191:http://www.google.com/chrome/sync";
 
 namespace {
 
diff --git a/components/metrics/url_constants.cc b/components/metrics/url_constants.cc
index 55d9e13..5f17829 100644
--- a/components/metrics/url_constants.cc
+++ b/components/metrics/url_constants.cc
@@ -6,7 +6,7 @@
 
 namespace metrics {
 
-const char kDefaultMetricsServerUrl[] = "https://clients4.google.com/uma/v2";
+const char kDefaultMetricsServerUrl[] = "trk:265:https://clients4.google.com/uma/v2";
 const char kDefaultMetricsMimeType[] = "application/vnd.chrome.uma";
 
 } // namespace metrics
diff --git a/components/password_manager/core/browser/password_store.cc b/components/password_manager/core/browser/password_store.cc
index f4cd065..3978ea0 100644
--- a/components/password_manager/core/browser/password_store.cc
+++ b/components/password_manager/core/browser/password_store.cc
@@ -120,10 +120,10 @@ void PasswordStore::GetLogins(const PasswordForm& form,
   // TODO(mdm): actually delete them at some point, say M24 or so.
   base::Time ignore_logins_cutoff;  // the null time
   if (form.scheme == PasswordForm::SCHEME_HTML &&
-      (form.signon_realm == "http://www.google.com" ||
-       form.signon_realm == "http://www.google.com/" ||
-       form.signon_realm == "https://www.google.com" ||
-       form.signon_realm == "https://www.google.com/")) {
+      (form.signon_realm == "trk:187:http://www.google.com" ||
+       form.signon_realm == "trk:188:http://www.google.com/" ||
+       form.signon_realm == "trk:189:https://www.google.com" ||
+       form.signon_realm == "trk:190:https://www.google.com/")) {
     static const base::Time::Exploded exploded_cutoff =
         { 2012, 1, 0, 1, 0, 0, 0, 0 };  // 00:00 Jan 1 2012
     ignore_logins_cutoff = base::Time::FromUTCExploded(exploded_cutoff);
diff --git a/components/policy/core/common/policy_loader_win.cc b/components/policy/core/common/policy_loader_win.cc
index 3be28f3..684c88f 100644
--- a/components/policy/core/common/policy_loader_win.cc
+++ b/components/policy/core/common/policy_loader_win.cc
@@ -69,7 +69,7 @@ const char kLegacyBrowserSupportExtensionId[] =
 
 // The web store url that is the only trusted source for extensions.
 const char kExpectedWebStoreUrl[] =
-    ";https://clients2.google.com/service/update2/crx";
+    ";trk:15:https://cache.iridiumbrowser.de/clients2.google.com/service/update2/crx";
 // String to be prepended to each blocked entry.
 const char kBlockedExtensionPrefix[] = "[BLOCKED]";
 
diff --git a/components/policy/resources/policy_templates.json b/components/policy/resources/policy_templates.json
index 0779ced..7e906ab 100644
--- a/components/policy/resources/policy_templates.json
+++ b/components/policy/resources/policy_templates.json
@@ -1823,7 +1823,7 @@
             'dynamic_refresh': True,
             'per_profile': True,
           },
-          'example_value': ['lcncmkcnkcdbbanbjakcencbaoegdjlp;https://clients2.google.com/service/update2/crx'],
+          'example_value': ['lcncmkcnkcdbbanbjakcencbaoegdjlp;trk:16:https://cache.iridiumbrowser.de/clients2.google.com/service/update2/crx'],
           'id': 34,
           'caption': '''Configure the list of force-installed extensions''',
           'desc': '''Allows you to specify a list of extensions that will be installed silently, without user interaction.
@@ -1836,7 +1836,7 @@
 
           For each item, <ph name="PRODUCT_NAME">$1<ex>Google Chrome</ex></ph> will retrieve the extension specified by the extension ID from the update service at the specified update URL and silently install it.
 
-          For example, <ph name="EXTENSION_POLICY_EXAMPLE">lcncmkcnkcdbbanbjakcencbaoegdjlp;https://clients2.google.com/service/update2/crx</ph> installs the <ph name="EXTENSION_POLICY_EXAMPLE_EXTENSION_NAME">Google SSL Web Search</ph> extension from the standard Chrome Web Store update URL. For more information about hosting extensions, see: <ph name="LINK_TO_EXTENSION_DOC2">https://developer.chrome.com/extensions/hosting</ph>.
+          For example, <ph name="EXTENSION_POLICY_EXAMPLE">lcncmkcnkcdbbanbjakcencbaoegdjlp;trk:17:https://cache.iridiumbrowser.de/clients2.google.com/service/update2/crx</ph> installs the <ph name="EXTENSION_POLICY_EXAMPLE_EXTENSION_NAME">Google SSL Web Search</ph> extension from the standard Chrome Web Store update URL. For more information about hosting extensions, see: <ph name="LINK_TO_EXTENSION_DOC2">https://developer.chrome.com/extensions/hosting</ph>.
 
           Users will be unable to uninstall extensions that are specified by this policy. If you remove an extension from this list, then it will be automatically uninstalled by <ph name="PRODUCT_NAME">$1<ex>Google Chrome</ex></ph>. Extensions specified in this list are also automatically whitelisted for installation; the ExtensionsInstallBlacklist does not affect them.
 
@@ -4634,7 +4634,7 @@
       'features': {
         'dynamic_refresh': True,
       },
-      'example_value': [ { "extension-id": "khgabmflimjjbclkmljlpmgaleanedem", "update-url": "http://clients2.google.com/service/update2/crx" } ],
+      'example_value': [ { "extension-id": "khgabmflimjjbclkmljlpmgaleanedem", "update-url": "trk:18:http://clients2.google.com/service/update2/crx" } ],
       'id': 135,
       'caption': '''List of AppPack extensions''',
       'desc': '''This policy is active in retail mode only.
diff --git a/components/rappor/rappor_service.cc b/components/rappor/rappor_service.cc
index 7fc4fce..11bce08 100644
--- a/components/rappor/rappor_service.cc
+++ b/components/rappor/rappor_service.cc
@@ -35,7 +35,7 @@ const char kRapporRolloutFieldTrialName[] = "RapporRollout";
 const char kRapporRolloutServerUrlParam[] = "ServerUrl";
 
 // The rappor server's URL.
-const char kDefaultServerUrl[] = "https://clients4.google.com/rappor";
+const char kDefaultServerUrl[] = "trk:266:https://clients4.google.com/rappor";
 
 GURL GetServerUrl() {
   std::string server_url = variations::GetVariationParamValue(
diff --git a/components/search_engines/prepopulated_engines.json b/components/search_engines/prepopulated_engines.json
index 2274eab..dd5e0a8 100644
--- a/components/search_engines/prepopulated_engines.json
+++ b/components/search_engines/prepopulated_engines.json
@@ -128,7 +128,7 @@
     "google": {
       "name": "Google",
       "keyword": "google.com",
-      "favicon_url": "http://www.google.com/favicon.ico",
+      "favicon_url": "trk:186:http://www.google.com/favicon.ico",
       "search_url": "{google:baseURL}search?q={searchTerms}&{google:RLZ}{google:originalQueryForSuggestion}{google:assistedQueryStats}{google:searchFieldtrialParameter}{google:bookmarkBarPinned}{google:searchClient}{google:sourceId}{google:instantExtendedEnabledParameter}{google:omniboxStartMarginParameter}{google:contextualSearchVersion}ie={inputEncoding}",
       "suggest_url": "{google:baseSuggestURL}search?{google:searchFieldtrialParameter}client={google:suggestClient}&gs_ri={google:suggestRid}&xssi=t&q={searchTerms}&{google:inputType}{google:cursorPosition}{google:currentPageUrl}{google:pageClassification}{google:searchVersion}{google:sessionToken}{google:prefetchQuery}sugkey={google:suggestAPIKeyParameter}",
       "instant_url": "{google:baseURL}webhp?sourceid=chrome-instant&{google:RLZ}{google:forceInstantResults}{google:instantExtendedEnabledParameter}{google:ntpIsThemedParameter}{google:omniboxStartMarginParameter}ie={inputEncoding}",
diff --git a/components/signin/core/browser/signin_account_id_helper.cc b/components/signin/core/browser/signin_account_id_helper.cc
index 9288fff..a702396 100644
--- a/components/signin/core/browser/signin_account_id_helper.cc
+++ b/components/signin/core/browser/signin_account_id_helper.cc
@@ -65,7 +65,7 @@ SigninAccountIdHelper::GaiaIdFetcher::~GaiaIdFetcher() {}
 
 void SigninAccountIdHelper::GaiaIdFetcher::Start() {
   OAuth2TokenService::ScopeSet scopes;
-  scopes.insert("https://www.googleapis.com/auth/userinfo.profile");
+  scopes.insert("trk:260:https://www.googleapis.com/auth/userinfo.profile");
   login_token_request_ = token_service_->StartRequest(
       signin_manager_->GetAuthenticatedAccountId(), scopes, this);
 }
diff --git a/components/translate/core/browser/translate_url_fetcher.cc b/components/translate/core/browser/translate_url_fetcher.cc
index 09704fd..d89497f 100644
--- a/components/translate/core/browser/translate_url_fetcher.cc
+++ b/components/translate/core/browser/translate_url_fetcher.cc
@@ -61,6 +61,7 @@ bool TranslateURLFetcher::Request(
   if (!extra_request_header_.empty())
     fetcher_->SetExtraRequestHeaders(extra_request_header_);
 
+  fprintf(stderr, "translator: fetching something from %s\n", url_.spec().c_str());
   fetcher_->Start();
 
   return true;
diff --git a/content/browser/speech/google_one_shot_remote_engine.cc b/content/browser/speech/google_one_shot_remote_engine.cc
index a74a60d..00d0532 100644
--- a/content/browser/speech/google_one_shot_remote_engine.cc
+++ b/content/browser/speech/google_one_shot_remote_engine.cc
@@ -26,7 +26,7 @@ namespace content {
 namespace {
 
 const char* const kDefaultSpeechRecognitionUrl =
-    "https://www.google.com/speech-api/v1/recognize?xjerr=1&client=chromium&";
+    "trk:185:https://www.google.com/speech-api/v1/recognize?xjerr=1&client=chromium&";
 const char* const kStatusString = "status";
 const char* const kHypothesesString = "hypotheses";
 const char* const kUtteranceString = "utterance";
diff --git a/content/browser/speech/google_streaming_remote_engine.cc b/content/browser/speech/google_streaming_remote_engine.cc
index ca8e906..b93d435 100644
--- a/content/browser/speech/google_streaming_remote_engine.cc
+++ b/content/browser/speech/google_streaming_remote_engine.cc
@@ -33,7 +33,7 @@ namespace content {
 namespace {
 
 const char kWebServiceBaseUrl[] =
-    "https://www.google.com/speech-api/full-duplex/v1";
+    "trk:184:https://www.google.com/speech-api/full-duplex/v1";
 const char kDownstreamUrl[] = "/down?";
 const char kUpstreamUrl[] = "/up?";
 const AudioEncoder::Codec kDefaultAudioCodec = AudioEncoder::CODEC_FLAC;
diff --git a/content/shell/browser/shell_browser_main_parts.cc b/content/shell/browser/shell_browser_main_parts.cc
index efc029e..29968e7 100644
--- a/content/shell/browser/shell_browser_main_parts.cc
+++ b/content/shell/browser/shell_browser_main_parts.cc
@@ -58,7 +58,7 @@ GURL GetStartupURL() {
 #endif
 
   if (args.empty())
-    return GURL("https://www.google.com/");
+    return GURL("trk:183:https://www.google.com/");
 
   GURL url(args[0]);
   if (url.is_valid() && url.has_scheme())
diff --git a/extensions/common/update_manifest.cc b/extensions/common/update_manifest.cc
index 57162da..c2d5790 100644
--- a/extensions/common/update_manifest.cc
+++ b/extensions/common/update_manifest.cc
@@ -17,7 +17,7 @@
 
 static const char* kExpectedGupdateProtocol = "2.0";
 static const char* kExpectedGupdateXmlns =
-    "http://www.google.com/update2/response";
+    "trk:182:http://www.google.com/update2/response";
 
 UpdateManifest::Result::Result()
     : size(0),
diff --git a/google_apis/gaia/gaia_constants.cc b/google_apis/gaia/gaia_constants.cc
index 4c00536..4d6f30d 100644
--- a/google_apis/gaia/gaia_constants.cc
+++ b/google_apis/gaia/gaia_constants.cc
@@ -25,7 +25,7 @@ const char kSyncService[] = "chromiumsync";
 const char kRemotingService[] = "chromoting";
 
 // OAuth scopes.
-const char kOAuth1LoginScope[] = "https://www.google.com/accounts/OAuthLogin";
+const char kOAuth1LoginScope[] = "trk:181:https://www.google.com/accounts/OAuthLogin";
 const char kOAuthWrapBridgeUserInfoScope[] =
     "https://www.googleapis.com/auth/userinfo.email";
 
diff --git a/google_apis/gaia/google_service_auth_error.cc b/google_apis/gaia/google_service_auth_error.cc
index 5fab6dd..5cb0475 100644
--- a/google_apis/gaia/google_service_auth_error.cc
+++ b/google_apis/gaia/google_service_auth_error.cc
@@ -238,7 +238,7 @@ std::string GoogleServiceAuthError::ToString() const {
     case WEB_LOGIN_REQUIRED:
       return "Less secure apps may not authenticate with this account. "
              "Please visit: "
-             "https://www.google.com/settings/security/lesssecureapps";
+             "trk:180:https://www.google.com/settings/security/lesssecureapps";
     default:
       NOTREACHED();
       return std::string();
diff --git a/google_apis/gcm/engine/gservices_settings.cc b/google_apis/gcm/engine/gservices_settings.cc
index ee342fe..a1cc1e2 100644
--- a/google_apis/gcm/engine/gservices_settings.cc
+++ b/google_apis/gcm/engine/gservices_settings.cc
@@ -24,18 +24,18 @@ const char kRegistrationURLKey[] = "gcm_registration_url";
 
 const int64 kDefaultCheckinInterval = 2 * 24 * 60 * 60;  // seconds = 2 days.
 const int64 kMinimumCheckinInterval = 12 * 60 * 60;      // seconds = 12 hours.
-const char kDefaultCheckinURL[] = "https://android.clients.google.com/checkin";
+const char kDefaultCheckinURL[] = "trk:110:https://android.clients.google.com/checkin";
 const char kDefaultMCSHostname[] = "mtalk.google.com";
 const int kDefaultMCSMainSecurePort = 5228;
 const int kDefaultMCSFallbackSecurePort = 443;
 const char kDefaultRegistrationURL[] =
-    "https://android.clients.google.com/c2dm/register3";
+    "trk:111:https://android.clients.google.com/c2dm/register3";
 // Settings that are to be deleted are marked with this prefix in checkin
 // response.
 const char kDeleteSettingPrefix[] = "delete_";
 // Settings digest starts with verison number followed by '-'.
 const char kDigestVersionPrefix[] = "1-";
-const char kMCSEnpointTemplate[] = "https://%s:%d";
+const char kMCSEnpointTemplate[] = "trk:112:https://%s:%d";
 const int kMaxSecurePort = 65535;
 
 std::string MakeMCSEndpoint(const std::string& mcs_hostname, int port) {
diff --git a/jingle/notifier/base/gaia_token_pre_xmpp_auth.cc b/jingle/notifier/base/gaia_token_pre_xmpp_auth.cc
index b8a2b15..c3d9f2c 100644
--- a/jingle/notifier/base/gaia_token_pre_xmpp_auth.cc
+++ b/jingle/notifier/base/gaia_token_pre_xmpp_auth.cc
@@ -32,7 +32,7 @@ class GaiaCookieMechanism : public buzz::SaslCookieMechanism {
     // These attributes are necessary for working with non-gmail gaia
     // accounts.
     const std::string NS_GOOGLE_AUTH_PROTOCOL(
-        "http://www.google.com/talk/protocol/auth");
+        "trk:179:http://www.google.com/talk/protocol/auth");
     const buzz::QName QN_GOOGLE_ALLOW_GENERATED_JID_XMPP_LOGIN(
         NS_GOOGLE_AUTH_PROTOCOL, "allow-generated-jid");
     const buzz::QName QN_GOOGLE_AUTH_CLIENT_USES_FULL_BIND_RESULT(
diff --git a/remoting/protocol/jingle_messages.cc b/remoting/protocol/jingle_messages.cc
index c2c9b80..812246d 100644
--- a/remoting/protocol/jingle_messages.cc
+++ b/remoting/protocol/jingle_messages.cc
@@ -19,7 +19,7 @@ namespace protocol {
 
 const char kJabberNamespace[] = "jabber:client";
 const char kJingleNamespace[] = "urn:xmpp:jingle:1";
-const char kP2PTransportNamespace[] = "http://www.google.com/transport/p2p";
+const char kP2PTransportNamespace[] = "trk:187:http://www.google.com/transport/p2p";
 
 namespace {
 
diff --git a/remoting/webapp/crd/js/feedback.js b/remoting/webapp/crd/js/feedback.js
index 75b32be..8c5e4ca 100644
--- a/remoting/webapp/crd/js/feedback.js
+++ b/remoting/webapp/crd/js/feedback.js
@@ -16,7 +16,7 @@ var remoting = remoting || {};
  */
 remoting.manageHelpAndFeedback = function(container) {
   var showHelp = function() {
-    window.open('https://www.google.com/support/chrome/bin/answer.py?' +
+    window.open('trk:177:https://www.google.com/support/chrome/bin/answer.py?' +
                 'answer=1649523');
   }
   var helpButton = container.querySelector('.menu-help');
diff --git a/remoting/webapp/crd/js/xmpp_login_handler.js b/remoting/webapp/crd/js/xmpp_login_handler.js
index 60199e7..e11a8b7 100644
--- a/remoting/webapp/crd/js/xmpp_login_handler.js
+++ b/remoting/webapp/crd/js/xmpp_login_handler.js
@@ -256,7 +256,7 @@ remoting.XmppLoginHandler.prototype.onTlsStarted = function() {
              'auth:allow-generated-jid="true" ' +
              'auth:client-uses-full-bind-result="true" ' +
              'auth:allow-non-google-login="true" ' +
-             'xmlns:auth="http://www.google.com/talk/protocol/auth">' +
+             'xmlns:auth="trk:176:http://www.google.com/talk/protocol/auth">' +
         cookie +
       '</auth>');
 };
diff --git a/rlz/lib/lib_values.cc b/rlz/lib/lib_values.cc
index 397668b..b060edd 100644
--- a/rlz/lib/lib_values.cc
+++ b/rlz/lib/lib_values.cc
@@ -41,7 +41,7 @@ const char kSetDccResponseVariable[] = "set_dcc";
 //
 
 const char kFinancialPingPath[] = "/tools/pso/ping";
-const char kFinancialServer[]   = "clients1.google.com";
+const char kFinancialServer[]   = "cache.iridiumbrowser.de/clients1.google.com"; /* not using URLRequest! catch with cache.ir */
 const int kFinancialPort = 80;
 
 // Ping times in 100-nanosecond intervals.
diff --git a/sync/tools/sync_client.cc b/sync/tools/sync_client.cc
index af3af65..b9f66c9 100644
--- a/sync/tools/sync_client.cc
+++ b/sync/tools/sync_client.cc
@@ -66,7 +66,7 @@ const char kXmppHostPortSwitch[] = "xmpp-host-port";
 const char kXmppTrySslTcpFirstSwitch[] = "xmpp-try-ssltcp-first";
 const char kXmppAllowInsecureConnectionSwitch[] =
     "xmpp-allow-insecure-connection";
-const char kSyncServiceURL[] = "https://clients4.google.com/chrome-sync/dev";
+const char kSyncServiceURL[] = "trk:267:https://clients4.google.com/chrome-sync/dev";
 
 // Needed to use a real host resolver.
 class MyTestURLRequestContext : public net::TestURLRequestContext {
diff --git a/ui/app_list/demo/app_list_demo_views.cc b/ui/app_list/demo/app_list_demo_views.cc
index 89cb926..b9d88c5 100644
--- a/ui/app_list/demo/app_list_demo_views.cc
+++ b/ui/app_list/demo/app_list_demo_views.cc
@@ -95,7 +95,7 @@ views::View* DemoAppListViewDelegate::CreateStartPageWebView(
     const gfx::Size& size) {
   web_contents_.reset(content::WebContents::Create(
       content::WebContents::CreateParams(browser_context_)));
-  web_contents_->GetController().LoadURL(GURL("http://www.google.com/"),
+  web_contents_->GetController().LoadURL(GURL("trk:175:http://www.google.com/"),
                                          content::Referrer(),
                                          ui::PAGE_TRANSITION_AUTO_TOPLEVEL,
                                          std::string());
diff --git a/ui/views/examples/webview_example.cc b/ui/views/examples/webview_example.cc
index feae6b9..2678a06 100644
--- a/ui/views/examples/webview_example.cc
+++ b/ui/views/examples/webview_example.cc
@@ -26,7 +26,7 @@ void WebViewExample::CreateExampleView(View* container) {
   container->SetLayoutManager(new FillLayout);
   container->AddChildView(webview_);
 
-  webview_->LoadInitialURL(GURL("http://www.google.com/"));
+  webview_->LoadInitialURL(GURL("trk:174:http://www.google.com/"));
   webview_->web_contents()->Focus();
 }
 
-- 
2.4.3

