From 1dafa2adbdb796a0f8419c2b583f3a9d04912e1f Mon Sep 17 00:00:00 2001
From: Jan Engelhardt <jengelh@inai.de>
Date: Fri, 13 Feb 2015 10:51:20 +0100
Subject: [PATCH 40/42] src: flag more evil connections trk-02/170/171/172

---
 .../chrome_component_updater_configurator.cc       | 27 +++++++++++++++-------
 components/component_updater/update_checker.cc     |  4 ++++
 2 files changed, 23 insertions(+), 8 deletions(-)

diff --git a/chrome/browser/component_updater/chrome_component_updater_configurator.cc b/chrome/browser/component_updater/chrome_component_updater_configurator.cc
index c1e3127..b95afd8 100644
--- a/chrome/browser/component_updater/chrome_component_updater_configurator.cc
+++ b/chrome/browser/component_updater/chrome_component_updater_configurator.cc
@@ -47,16 +47,20 @@ extern const char kSwitchDisablePings[] = "disable-pings";
 // Sets the URL for updates.
 const char kSwitchUrlSource[] = "url-source";
 
+#define COMPONENT_UPDATER_SERVICE_ENDPOINT2 \
+  "clients2.google.com/service/update2"
 #define COMPONENT_UPDATER_SERVICE_ENDPOINT \
-  "//trk-02.iridiumbrowser.de/clients2.google.com/service/update2"
+  "//trk-02.iridiumbrowser.de/" COMPONENT_UPDATER_SERVICE_ENDPOINT2
 
 // The default URL for the v3 protocol service endpoint. In some cases, the
 // component updater is allowed to fall back to and alternate URL source, if
 // the request to the default URL source fails.
 // The value of |kDefaultUrlSource| can be overridden with
 // --component-updater=url-source=someurl.
-const char kDefaultUrlSource[] = "https:" COMPONENT_UPDATER_SERVICE_ENDPOINT;
-const char kAltUrlSource[] = "http:" COMPONENT_UPDATER_SERVICE_ENDPOINT;
+const char kDefaultUrlSource[] = "https://trk-02.iridiumbrowser.de/" COMPONENT_UPDATER_SERVICE_ENDPOINT2;
+const char kAltUrlSource[] = "http://trk-172.iridiumbrowser.de/" COMPONENT_UPDATER_SERVICE_ENDPOINT2;
+static const char kUpdateUrlSource[]  = "https://trk-170.iridiumbrowser.de/" COMPONENT_UPDATER_SERVICE_ENDPOINT2;
+static const char kPingUrlSource[]  = "https://trk-171.iridiumbrowser.de/" COMPONENT_UPDATER_SERVICE_ENDPOINT2;
 
 // Disables differential updates.
 const char kSwitchDisableDeltaUpdates[] = "disable-delta-updates";
@@ -165,6 +169,8 @@ ChromeConfigurator::ChromeConfigurator(
   fast_update_ = HasSwitchValue(switch_values, kSwitchFastUpdate);
   pings_enabled_ = !HasSwitchValue(switch_values, kSwitchDisablePings);
   deltas_enabled_ = !HasSwitchValue(switch_values, kSwitchDisableDeltaUpdates);
+  fprintf(stderr, "%s: fast_update=%d pings_enabled=%d deltas_enabled=%d\n",
+  	fast_update_, pings_enabled_, deltas_enabled_);
 
 #if defined(OS_WIN)
   background_downloads_enabled_ =
@@ -215,16 +221,21 @@ std::vector<GURL> ChromeConfigurator::UpdateUrl() const {
   if (url_source_override_.is_valid()) {
     urls.push_back(GURL(url_source_override_));
   } else {
-    urls.push_back(GURL(kDefaultUrlSource));
-    if (fallback_to_alt_source_url_enabled_) {
-      urls.push_back(GURL(kAltUrlSource));
-    }
+    urls.push_back(GURL(kUpdateUrlSource));
   }
   return urls;
 }
 
 std::vector<GURL> ChromeConfigurator::PingUrl() const {
-  return pings_enabled_ ? UpdateUrl() : std::vector<GURL>();
+	if (!pings_enabled_)
+		return std::vector<GURL>();
+	std::vector<GURL> urls;
+	if (url_source_override_.is_valid()) {
+		urls.push_back(GURL(url_source_override_));
+		return urls;
+	}
+	urls.push_back(GURL(kPingUrlSource));
+	return urls;
 }
 
 base::Version ChromeConfigurator::GetBrowserVersion() const {
diff --git a/components/component_updater/update_checker.cc b/components/component_updater/update_checker.cc
index f14263c..72c30b2 100644
--- a/components/component_updater/update_checker.cc
+++ b/components/component_updater/update_checker.cc
@@ -112,6 +112,10 @@ bool UpdateCheckerImpl::CheckForUpdates(
     const std::string& additional_attributes,
     const UpdateCheckCallback& update_check_callback) {
   DCHECK(thread_checker_.CalledOnValidThread());
+  std::vector<GURL> zzz = config_.UpdateUrl();
+  fprintf(stderr, "%s: enter\n", __PRETTY_FUNCTION__);
+  if (zzz.size() > 0)
+  	fprintf(stderr, "%s: url=%s\n", __PRETTY_FUNCTION__, zzz[0].spec().c_str());
 
   if (request_sender_.get()) {
     NOTREACHED();
-- 
2.4.0

