From 63ef8848f09d72691a63f91d3e11dc50229e28a4 Mon Sep 17 00:00:00 2001
From: Jan Engelhardt <jengelh@inai.de>
Date: Thu, 17 May 2018 21:38:41 +0200
Subject: [PATCH 59/59] chromium: fix Google's beta quality code

Because this commit would normally touch a separate
submodule, that patch is included in this commit as a file.

rpmlint:
 I: Program causes undefined operation
    (likely same variable used twice and post/pre incremented in the same expression).
    e.g. x = x++; Split it in two operations.
 W: iridium-browser sequence-point ../../cc/layers/surface_layer_impl.cc:135
 W: iridium-browser sequence-point ../../headless/lib/browser/protocol/browser_handler.cc:74

 I: Program is using uninitialized variables.
    Note the difference between "is used" and "may be used"
 W: iridium-browser uninitialized-variable ../../third_party/cacheinvalidation/src/google/cacheinvalidation/include/types.h:175

 I: Program returns random data in a function
 E: iridium-browser no-return-in-nonvoid-function ../../chrome/browser/ui/webui/discards/discards_ui.cc:51

gcc:
[ 1537s] ../../cc/layers/surface_layer_impl.cc:135:23: warning: operation on 'shared_quad_state' may be undefined [-Wsequence-point]
[ 2009s] ../../headless/lib/browser/protocol/browser_handler.cc:74:56: warning: operation on 'web_contents' may be undefined [-Wsequence-point]
[ 2009s]    HeadlessWebContentsImpl* web_contents = web_contents =
[ 1512s] ../../third_party/cacheinvalidation/src/google/cacheinvalidation/include/types.h: In function 'bool syncer::ObjectIdFromValue(const base::DictionaryValue&, invalidation::ObjectId*)':
[ 1512s] ../../third_party/cacheinvalidation/src/google/cacheinvalidation/include/types.h:175:7: warning: '<anonymous>.invalidation::ObjectId::source_' is used uninitialized in this function [-Wuninitialized]
[ 1512s]  class ObjectId {
[ 6638s] ../../chrome/browser/ui/webui/discards/discards_ui.cc: In function 'mojom::LifecycleUnitVisibility {anonymous}::GetLifecycleUnitVisibility(content::Visibility)':
[ 6638s] ../../chrome/browser/ui/webui/discards/discards_ui.cc:51:1: warning: control reaches end of non-void function [-Wreturn-type]
[ 6638s]  }
---
 0001-skia-fix-Google-s-beta-quality-code.patch     | 36 ++++++++++++++++++++++
 cc/layers/surface_layer_impl.cc                    |  2 +-
 chrome/browser/ui/webui/discards/discards_ui.cc    |  2 --
 headless/lib/browser/protocol/browser_handler.cc   |  2 +-
 .../src/google/cacheinvalidation/include/types.h   |  2 +-
 5 files changed, 39 insertions(+), 5 deletions(-)
 create mode 100644 0001-skia-fix-Google-s-beta-quality-code.patch

diff --git a/0001-skia-fix-Google-s-beta-quality-code.patch b/0001-skia-fix-Google-s-beta-quality-code.patch
new file mode 100644
index 000000000000..d35e6bf845b0
--- /dev/null
+++ b/0001-skia-fix-Google-s-beta-quality-code.patch
@@ -0,0 +1,36 @@
+From c30902b31cb885d13a04fe7266ae155c4edfaa38 Mon Sep 17 00:00:00 2001
+From: Jan Engelhardt <jengelh@inai.de>
+Date: Thu, 17 May 2018 21:44:24 +0200
+Subject: [PATCH] skia: fix Google's beta quality code
+
+rpmlint:
+  I: Program is using uninitialized variables.
+      Note the difference between "is used" and "may be used"
+  W: iridium-browser uninitialized-variable ../../third_party/skia/include/c/../private/SkTHash.h:272
+
+gcc:
+  ../../third_party/skia/include/c/../private/SkTHash.h: In member function 'void SkTHashTable<T, K, Traits>::remove(const K&) [with T = SkTHashMap<unsigned int, GrTextBlobCache::BlobIDCacheEntry>::Pair; K = unsigned int; Traits = SkTHashMap<unsigned int, GrTextBlobCache::BlobIDCacheEntry>::Pair]':
+  ../../third_party/skia/include/c/../private/SkTHash.h:272:12: warning: '<anonymous>.SkTHashMap<unsigned int, GrTextBlobCache::BlobIDCacheEntry>::Pair::key' is used uninitialized in this function [-Wuninitialized]
+    struct Pair {
+---
+ include/private/SkTHash.h | 4 ++--
+ 1 file changed, 2 insertions(+), 2 deletions(-)
+
+diff --git a/third_party/skia/include/private/SkTHash.h b/third_party/skia/include/private/SkTHash.h
+index 655e12c618..e48b79582c 100644
+--- a/third_party/skia/include/private/SkTHash.h
++++ b/third_party/skia/include/private/SkTHash.h
+@@ -270,8 +270,8 @@ public:
+ 
+ private:
+     struct Pair {
+-        K key;
+-        V val;
++        K key{};
++        V val{};
+         static const K& GetKey(const Pair& p) { return p.key; }
+         static uint32_t Hash(const K& key) { return HashK()(key); }
+     };
+-- 
+2.16.3
+
diff --git a/cc/layers/surface_layer_impl.cc b/cc/layers/surface_layer_impl.cc
index d90e233bfd31..74c367cc550f 100644
--- a/cc/layers/surface_layer_impl.cc
+++ b/cc/layers/surface_layer_impl.cc
@@ -132,7 +132,7 @@ viz::SurfaceDrawQuad* SurfaceLayerImpl::CreateSurfaceDrawQuad(
   // *|common_shared_quad_state| so that it may be reused by another emitted
   // viz::SurfaceDrawQuad.
   viz::SharedQuadState* shared_quad_state =
-    shared_quad_state = render_pass->CreateAndAppendSharedQuadState();
+    render_pass->CreateAndAppendSharedQuadState();
 
   PopulateScaledSharedQuadState(shared_quad_state, device_scale_factor,
                                 device_scale_factor, contents_opaque());
diff --git a/chrome/browser/ui/webui/discards/discards_ui.cc b/chrome/browser/ui/webui/discards/discards_ui.cc
index bcf0a16b0c22..21286c3967b1 100644
--- a/chrome/browser/ui/webui/discards/discards_ui.cc
+++ b/chrome/browser/ui/webui/discards/discards_ui.cc
@@ -44,10 +44,8 @@ mojom::LifecycleUnitVisibility GetLifecycleUnitVisibility(
     case content::Visibility::VISIBLE:
       return mojom::LifecycleUnitVisibility::VISIBLE;
   }
-#if defined(COMPILER_MSVC)
   NOTREACHED();
   return mojom::LifecycleUnitVisibility::VISIBLE;
-#endif
 }
 
 class DiscardsDetailsProviderImpl : public mojom::DiscardsDetailsProvider {
diff --git a/headless/lib/browser/protocol/browser_handler.cc b/headless/lib/browser/protocol/browser_handler.cc
index 97ec5f5892c6..955b2334bc40 100644
--- a/headless/lib/browser/protocol/browser_handler.cc
+++ b/headless/lib/browser/protocol/browser_handler.cc
@@ -71,7 +71,7 @@ Response BrowserHandler::Close() {
 Response BrowserHandler::SetWindowBounds(
     int window_id,
     std::unique_ptr<Browser::Bounds> window_bounds) {
-  HeadlessWebContentsImpl* web_contents = web_contents =
+  HeadlessWebContentsImpl* web_contents =
       browser()->GetWebContentsForWindowId(window_id);
   if (!web_contents)
     return Response::Error("Browser window not found");
diff --git a/third_party/cacheinvalidation/src/google/cacheinvalidation/include/types.h b/third_party/cacheinvalidation/src/google/cacheinvalidation/include/types.h
index 2894bbfc0d66..2c842010c8c3 100644
--- a/third_party/cacheinvalidation/src/google/cacheinvalidation/include/types.h
+++ b/third_party/cacheinvalidation/src/google/cacheinvalidation/include/types.h
@@ -207,7 +207,7 @@ class ObjectId {
   bool is_initialized_;
 
   /* The invalidation source type. */
-  int source_;
+  int source_ = 0;
 
   /* The name/unique id for the object. */
   string name_;
-- 
2.16.3

