From ce5a4a549d660615ef08a756ad674b41ad88c241 Mon Sep 17 00:00:00 2001
From: Jan Engelhardt <jengelh@inai.de>
Date: Sun, 24 May 2015 14:54:37 +0200
Subject: [PATCH 48/50] iridium: graphic output on trk: URL

This commit builds upon the previous one by enhancing the printf
statement (which is seldomly visible) by a graphical note displayed on
all browser windows (because we do not know which window issues the
URL request, if any).

Implementation:

The Javascript interpreter is called to execute an alert() call, which
seems both dead simple, and is a lot more reliable than trying to
spawn and manage a BubbleDelegateView class.
---
 chrome/app/chrome_main.cc                     |  3 +++
 chrome/browser/ui/browser_finder.cc           | 14 ++++++++++++++
 chrome/browser/ui/browser_finder.h            |  2 ++
 chrome/browser/ui/views/frame/browser_view.cc | 15 +++++++++++++++
 chrome/browser/ui/views/frame/browser_view.h  |  1 +
 content/browser/browser_url_handler_impl.cc   |  3 +++
 net/url_request/url_request.cc                |  4 ++++
 net/url_request/url_request.h                 |  2 ++
 8 files changed, 44 insertions(+)

diff --git a/chrome/app/chrome_main.cc b/chrome/app/chrome_main.cc
index 360b7e5..95160a9 100644
--- a/chrome/app/chrome_main.cc
+++ b/chrome/app/chrome_main.cc
@@ -5,6 +5,8 @@
 #include "chrome/app/chrome_main_delegate.h"
 
 #include "content/public/app/content_main.h"
+#include "chrome/browser/ui/browser_finder.h"
+#include "net/url_request/url_request.h"
 
 #if defined(OS_WIN)
 #include "base/debug/dump_without_crashing.h"
@@ -63,6 +65,7 @@ int ChromeMain(int argc, const char** argv) {
   params.argv = argv;
 #endif
 
+  net::ui_alert_trace_func = &chrome::ui_show_trace_alert;
   int rv = content::ContentMain(params);
 
 #if defined(OS_WIN)
diff --git a/chrome/browser/ui/browser_finder.cc b/chrome/browser/ui/browser_finder.cc
index 92bb2f8..b4b0685 100644
--- a/chrome/browser/ui/browser_finder.cc
+++ b/chrome/browser/ui/browser_finder.cc
@@ -11,6 +11,7 @@
 #include "chrome/browser/ui/tab_contents/tab_contents_iterator.h"
 #include "chrome/browser/ui/tabs/tab_strip_model.h"
 #include "content/public/browser/navigation_controller.h"
+#include "chrome/browser/ui/views/frame/browser_view.h"
 
 using content::WebContents;
 
@@ -139,6 +140,19 @@ Browser* FindBrowserWithProfile(Profile* profile,
   return FindBrowserWithTabbedOrAnyType(profile, desktop_type, false, false);
 }
 
+void ui_show_trace_alert(const GURL &url)
+{
+	for (BrowserIterator i; !i.done(); i.Next()) {
+		Browser *b = *i;
+		if (b == NULL)
+			continue;
+		auto bv = BrowserView::GetBrowserViewForBrowser(b);
+		if (bv == NULL)
+			continue;
+		bv->show_trace_alert(url);
+	}
+}
+
 Browser* FindBrowserWithID(SessionID::id_type desired_id) {
   for (BrowserIterator it; !it.done(); it.Next()) {
     if (it->session_id().id() == desired_id)
diff --git a/chrome/browser/ui/browser_finder.h b/chrome/browser/ui/browser_finder.h
index 8c1c768..c4dc0bc 100644
--- a/chrome/browser/ui/browser_finder.h
+++ b/chrome/browser/ui/browser_finder.h
@@ -92,6 +92,8 @@ size_t GetBrowserCount(Profile* profile, HostDesktopType type);
 // desktop defined by |type|.
 size_t GetTabbedBrowserCount(Profile* profile, HostDesktopType type);
 
+extern void ui_show_trace_alert(const GURL &);
+
 }  // namespace chrome
 
 #endif  // CHROME_BROWSER_UI_BROWSER_FINDER_H_
diff --git a/chrome/browser/ui/views/frame/browser_view.cc b/chrome/browser/ui/views/frame/browser_view.cc
index 3dceb94e..48e8ffd 100644
--- a/chrome/browser/ui/views/frame/browser_view.cc
+++ b/chrome/browser/ui/views/frame/browser_view.cc
@@ -14,6 +14,7 @@
 #include "base/prefs/pref_service.h"
 #include "base/profiler/scoped_tracker.h"
 #include "base/strings/string_number_conversions.h"
+#include "base/strings/utf_string_conversions.h"
 #include "chrome/app/chrome_command_ids.h"
 #include "chrome/app/chrome_dll_resource.h"
 #include "chrome/browser/app_mode/app_mode_utils.h"
@@ -140,6 +141,7 @@
 #include "ui/views/widget/root_view.h"
 #include "ui/views/widget/widget.h"
 #include "ui/views/window/dialog_delegate.h"
+#include "components/app_modal/app_modal_dialog.h"
 
 #if defined(USE_AURA)
 #include "ui/aura/client/window_tree_client.h"
@@ -1279,6 +1281,19 @@ bool BrowserView::ShowSessionCrashedBubble() {
   return SessionCrashedBubbleView::Show(browser_.get());
 }
 
+void BrowserView::show_trace_alert(const GURL &url)
+{
+	auto wc = GetActiveWebContents();
+	if (wc == NULL)
+		return;
+	auto mf = wc->GetMainFrame();
+	if (mf == NULL)
+		return;
+	std::string s = "alert(\"Attempt at loading traced URL:\\n " +
+	                url.spec() + "\");";
+	mf->ExecuteJavaScript(base::ASCIIToUTF16(s.c_str()));
+}
+
 bool BrowserView::IsProfileResetBubbleSupported() const {
   return true;
 }
diff --git a/chrome/browser/ui/views/frame/browser_view.h b/chrome/browser/ui/views/frame/browser_view.h
index 50ca794..57c079f 100644
--- a/chrome/browser/ui/views/frame/browser_view.h
+++ b/chrome/browser/ui/views/frame/browser_view.h
@@ -315,6 +315,7 @@ class BrowserView : public BrowserWindow,
                            translate::TranslateErrors::Type error_type,
                            bool is_user_gesture) override;
   bool ShowSessionCrashedBubble() override;
+  void show_trace_alert(const GURL &);
   bool IsProfileResetBubbleSupported() const override;
   GlobalErrorBubbleViewBase* ShowProfileResetBubble(
       const base::WeakPtr<ProfileResetGlobalError>& global_error) override;
diff --git a/content/browser/browser_url_handler_impl.cc b/content/browser/browser_url_handler_impl.cc
index 3b143ed..a5225f9 100644
--- a/content/browser/browser_url_handler_impl.cc
+++ b/content/browser/browser_url_handler_impl.cc
@@ -10,6 +10,7 @@
 #include "content/public/browser/content_browser_client.h"
 #include "content/public/common/url_constants.h"
 #include "url/gurl.h"
+#include "net/url_request/url_request.h"
 
 namespace content {
 
@@ -31,6 +32,8 @@ static bool handle_trace_scheme(GURL *url, BrowserContext *)
 	const char *xreset = tty ? "\033[0m" : ""; // ]
 	fprintf(stderr, "%s*** handle_trace_scheme(%s)%s\n",
 	        xhi, url->possibly_invalid_spec().c_str(), xreset);
+	if (net::ui_alert_trace_func != NULL)
+		(*net::ui_alert_trace_func)(*url);
 	*url = url->strip_trk();
 	return false;
 }
diff --git a/net/url_request/url_request.cc b/net/url_request/url_request.cc
index 6d30e1d..bd601c2 100644
--- a/net/url_request/url_request.cc
+++ b/net/url_request/url_request.cc
@@ -45,6 +45,8 @@ using std::string;
 
 namespace net {
 
+void (*ui_alert_trace_func)(const GURL &);
+
 namespace {
 
 // Max number of http redirects to follow.  Same number as gecko.
@@ -564,6 +566,8 @@ URLRequest::URLRequest(const GURL& url,
 	if (url.scheme() == url::kTraceScheme) {
 		fprintf(stderr, "%s*** URLRequest(%s)%s\n",
 			xred, url.possibly_invalid_spec().c_str(), xreset);
+		if (ui_alert_trace_func != NULL)
+			(*ui_alert_trace_func)(url);
 		url_chain_ = {1, url.strip_trk()};
 	} else {
 		fprintf(stderr, "%s***%s URLRequest(%s)%s\n",
diff --git a/net/url_request/url_request.h b/net/url_request/url_request.h
index e623c20..a82ecf8 100644
--- a/net/url_request/url_request.h
+++ b/net/url_request/url_request.h
@@ -821,6 +821,8 @@ class NET_EXPORT URLRequest : NON_EXPORTED_BASE(public base::NonThreadSafe),
   DISALLOW_COPY_AND_ASSIGN(URLRequest);
 };
 
+extern void NET_EXPORT (*ui_alert_trace_func)(const GURL &);
+
 }  // namespace net
 
 #endif  // NET_URL_REQUEST_URL_REQUEST_H_
-- 
2.4.0

