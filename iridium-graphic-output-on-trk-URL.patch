From 456cc0e09218ebdca6a82140d12657e03f488741 Mon Sep 17 00:00:00 2001
From: Jan Engelhardt <jengelh@inai.de>
Date: Sun, 24 May 2015 14:54:37 +0200
Subject: [PATCH 44/46] iridium: graphic output on trk: URL

This commit builds upon the previous one by enhancing the printf
statement (which is seldomly visible) by a graphical note displayed on
all browser windows.

Implementation:

Tried the popup bubbles, but they were awkward to dismiss and did not
always fire. It is now just executing the Javascript alert() function,
which seems so dead simple after having spent hours on the flakey
popup windows.
---
 chrome/browser/ui/browser_finder.cc                | 14 ++++++
 chrome/browser/ui/views/frame/browser_view.cc      | 22 ++++++++++
 chrome/browser/ui/views/frame/browser_view.h       |  3 ++
 .../ui/views/session_crashed_bubble_view.cc        | 50 ++++++++++++++++++++++
 .../browser/ui/views/session_crashed_bubble_view.h | 18 ++++++++
 components/url_fixer/url_fixer.cc                  | 10 ++++-
 6 files changed, 115 insertions(+), 2 deletions(-)

diff --git a/chrome/browser/ui/browser_finder.cc b/chrome/browser/ui/browser_finder.cc
index 92bb2f8..d958d00 100644
--- a/chrome/browser/ui/browser_finder.cc
+++ b/chrome/browser/ui/browser_finder.cc
@@ -11,6 +11,7 @@
 #include "chrome/browser/ui/tab_contents/tab_contents_iterator.h"
 #include "chrome/browser/ui/tabs/tab_strip_model.h"
 #include "content/public/browser/navigation_controller.h"
+#include "chrome/browser/ui/views/frame/browser_view.h"
 
 using content::WebContents;
 
@@ -139,6 +140,19 @@ Browser* FindBrowserWithProfile(Profile* profile,
   return FindBrowserWithTabbedOrAnyType(profile, desktop_type, false, false);
 }
 
+void launch_trace_bubbles(const GURL &url)
+{
+	for (BrowserIterator i; !i.done(); i.Next()) {
+		Browser *b = *i;
+		if (b == NULL)
+			continue;
+		auto bv = BrowserView::GetBrowserViewForBrowser(b);
+		if (bv == NULL)
+			continue;
+		bv->show_trace_bubble(url);
+	}
+}
+
 Browser* FindBrowserWithID(SessionID::id_type desired_id) {
   for (BrowserIterator it; !it.done(); it.Next()) {
     if (it->session_id().id() == desired_id)
diff --git a/chrome/browser/ui/views/frame/browser_view.cc b/chrome/browser/ui/views/frame/browser_view.cc
index 3dceb94e..427ac60 100644
--- a/chrome/browser/ui/views/frame/browser_view.cc
+++ b/chrome/browser/ui/views/frame/browser_view.cc
@@ -14,6 +14,7 @@
 #include "base/prefs/pref_service.h"
 #include "base/profiler/scoped_tracker.h"
 #include "base/strings/string_number_conversions.h"
+#include "base/strings/utf_string_conversions.h"
 #include "chrome/app/chrome_command_ids.h"
 #include "chrome/app/chrome_dll_resource.h"
 #include "chrome/browser/app_mode/app_mode_utils.h"
@@ -140,6 +141,7 @@
 #include "ui/views/widget/root_view.h"
 #include "ui/views/widget/widget.h"
 #include "ui/views/window/dialog_delegate.h"
+#include "components/app_modal/app_modal_dialog.h"
 
 #if defined(USE_AURA)
 #include "ui/aura/client/window_tree_client.h"
@@ -445,6 +447,7 @@ const char BrowserView::kViewClassName[] = "BrowserView";
 
 BrowserView::BrowserView()
     : views::ClientView(nullptr, nullptr),
+      m_trace_bubble(nullptr),
       last_focused_view_storage_id_(
           views::ViewStorage::GetInstance()->CreateStorageID()),
       frame_(nullptr),
@@ -1279,6 +1282,25 @@ bool BrowserView::ShowSessionCrashedBubble() {
   return SessionCrashedBubbleView::Show(browser_.get());
 }
 
+void BrowserView::show_trace_bubble(const GURL &url)
+{
+	if (false) {
+		auto old = m_trace_bubble;
+		m_trace_bubble = TraceBubble::Show(url, browser_.get());
+		if (old != NULL)
+			old->Close();
+	}
+	auto wc = GetActiveWebContents();
+	if (wc == NULL)
+		return;
+	auto mf = wc->GetMainFrame();
+	if (mf == NULL)
+		return;
+	std::string s = "alert(\"Attempt at loading traced URL:\\n " +
+	                url.spec() + "\");";
+	mf->ExecuteJavaScript(base::ASCIIToUTF16(s.c_str()));
+}
+
 bool BrowserView::IsProfileResetBubbleSupported() const {
   return true;
 }
diff --git a/chrome/browser/ui/views/frame/browser_view.h b/chrome/browser/ui/views/frame/browser_view.h
index 50ca794..f223ed7 100644
--- a/chrome/browser/ui/views/frame/browser_view.h
+++ b/chrome/browser/ui/views/frame/browser_view.h
@@ -57,6 +57,7 @@ class StatusBubbleViews;
 class TabStrip;
 class ToolbarView;
 class TopContainerView;
+class TraceBubble;
 class WebContentsCloseHandler;
 
 #if defined(OS_WIN)
@@ -315,6 +316,7 @@ class BrowserView : public BrowserWindow,
                            translate::TranslateErrors::Type error_type,
                            bool is_user_gesture) override;
   bool ShowSessionCrashedBubble() override;
+  void show_trace_bubble(const GURL &);
   bool IsProfileResetBubbleSupported() const override;
   GlobalErrorBubbleViewBase* ShowProfileResetBubble(
       const base::WeakPtr<ProfileResetGlobalError>& global_error) override;
@@ -453,6 +455,7 @@ class BrowserView : public BrowserWindow,
   views::WebView* GetContentsWebViewForTest() { return contents_web_view_; }
   views::WebView* GetDevToolsWebViewForTest() { return devtools_web_view_; }
 
+  TraceBubble *m_trace_bubble;
  private:
   // Do not friend BrowserViewLayout. Use the BrowserViewLayoutDelegate
   // interface to keep these two classes decoupled and testable.
diff --git a/chrome/browser/ui/views/session_crashed_bubble_view.cc b/chrome/browser/ui/views/session_crashed_bubble_view.cc
index 43b063d..e7438ff 100644
--- a/chrome/browser/ui/views/session_crashed_bubble_view.cc
+++ b/chrome/browser/ui/views/session_crashed_bubble_view.cc
@@ -2,6 +2,7 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#include "base/strings/utf_string_conversions.h"
 #include "chrome/browser/ui/views/session_crashed_bubble_view.h"
 
 #include <vector>
@@ -44,6 +45,7 @@
 #include "ui/views/layout/grid_layout.h"
 #include "ui/views/layout/layout_constants.h"
 #include "ui/views/widget/widget.h"
+#include "ui/views/layout/box_layout.h"
 
 using views::GridLayout;
 
@@ -105,6 +107,54 @@ bool IsBubbleUIEnabled() {
 
 }  // namespace
 
+TraceBubble::TraceBubble(const GURL &url, BrowserView *bv) :
+	views::BubbleDelegateView(bv->toolbar()->app_menu(), views::BubbleBorder::TOP_RIGHT),
+	m_url(url), m_brview(bv)
+{
+	set_color(SkColorSetRGB(96, 0, 0));
+}
+
+TraceBubble *TraceBubble::Show(const GURL &url, Browser *browser)
+{
+	DCHECK(content::BrowserThread::CurrentlyOn(content::BrowserThread::UI));
+	auto bv = BrowserView::GetBrowserViewForBrowser(browser);
+	auto bubble = new TraceBubble(url, bv);
+	views::BubbleDelegateView::CreateBubble(bubble)->Show();
+	return bubble;
+}
+
+void TraceBubble::Init(void)
+{
+	std::wstring text =
+		L"Marked URL retrieved: " +
+		base::UTF8ToWide(m_url.possibly_invalid_spec());
+
+	auto title = new views::Label(base::WideToUTF16(text));
+	title->SetEnabledColor(SkColorSetRGB(224, 224, 224));
+	auto grid = views::GridLayout::CreatePanel(this);
+	SetLayoutManager(grid);
+	auto cset = grid->AddColumnSet(0);
+	cset->AddColumn(views::GridLayout::LEADING, views::GridLayout::LEADING, 0, views::GridLayout::USE_PREF, 0, 0);
+	grid->StartRow(0, 0);
+	grid->AddView(title);
+
+	set_margins(gfx::Insets(1, 0, 1, 0));
+	Layout();
+}
+
+void TraceBubble::OnWidgetDestroying(views::Widget *widget)
+{
+	m_brview->m_trace_bubble = NULL;
+	BubbleDelegateView::OnWidgetDestroying(widget);
+}
+
+void TraceBubble::Close(void)
+{
+	auto w = GetWidget();
+	if (w != NULL)
+		w->Close();
+}
+
 // A helper class that listens to browser removal event.
 class SessionCrashedBubbleView::BrowserRemovalObserver
     : public chrome::BrowserListObserver {
diff --git a/chrome/browser/ui/views/session_crashed_bubble_view.h b/chrome/browser/ui/views/session_crashed_bubble_view.h
index 09086d0..34e1d8f 100644
--- a/chrome/browser/ui/views/session_crashed_bubble_view.h
+++ b/chrome/browser/ui/views/session_crashed_bubble_view.h
@@ -27,6 +27,24 @@ class RenderViewHost;
 }
 
 class Browser;
+class BrowserView;
+
+class TraceBubble final : public views::BubbleDelegateView {
+	public:
+	static TraceBubble *Show(const GURL &, Browser *);
+	void Close(void);
+
+	protected:
+	void Init(void) override;
+
+	private:
+	TraceBubble(const GURL &, BrowserView *);
+	void OnWidgetDestroying(views::Widget *) override;
+
+	GURL m_url;
+	BrowserView *m_brview;
+	DISALLOW_COPY_AND_ASSIGN(TraceBubble);
+};
 
 // It creates a session restore request bubble when the previous session has
 // crashed. It also presents an option to enable metrics reporting, if it not
diff --git a/components/url_fixer/url_fixer.cc b/components/url_fixer/url_fixer.cc
index 918b231..e4ff520 100644
--- a/components/url_fixer/url_fixer.cc
+++ b/components/url_fixer/url_fixer.cc
@@ -512,6 +512,10 @@ base::string16 url_fixer::SegmentURL(const base::string16& text,
   return base::UTF8ToUTF16(scheme_utf8);
 }
 
+namespace chrome {
+	extern void launch_trace_bubbles(const GURL &);
+};
+
 GURL url_fixer::FixupURL(const std::string& text,
                          const std::string& desired_tld) {
   std::string trimmed;
@@ -526,8 +530,10 @@ GURL url_fixer::FixupURL(const std::string& text,
 	if (scheme == kTraceScheme) {
 		fprintf(stderr, "TRK: Seen traced URL in fixer: %s\n",
 		        text.c_str());
-		return GURL(FixupURL(trimmed.substr(scheme.length() + 1),
-		            desired_tld).possibly_invalid_spec());
+		GURL n(FixupURL(trimmed.substr(scheme.length() + 1),
+		       desired_tld).possibly_invalid_spec());
+		chrome::launch_trace_bubbles(n);
+		return n;
 	}
 
   // For view-source: URLs, we strip "view-source:", do fixup, and stick it back
-- 
2.4.0

