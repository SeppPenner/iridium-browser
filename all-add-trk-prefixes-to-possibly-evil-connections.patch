From 06f6141610cb2aa562c94dbb9f1f4355e4b34c5d Mon Sep 17 00:00:00 2001
From: Jan Engelhardt <jengelh@inai.de>
Date: Mon, 30 Sep 2019 09:37:51 +0200
Subject: [PATCH 75/76] all: add trk: prefixes to possibly evil connections

Prefix URLs to Google services with trk: so that whenever something
tries to load them, the developer will be informed via printf and
dialog (extra info bar between URLbar and content window) about this.

If you see such dialog, we know that (a) either the URL needs to be
whitelisted, or (b) the feature that triggered it needs to be disabled
by default.
---
 build/mac/tweak_info_plist.py                 |  2 +-
 .../customization/customization_document.cc   |  2 +-
 .../file_manager/private_api_drive.cc         |  2 +-
 .../file_manager/private_api_misc.cc          |  2 +-
 .../remote_commands/crd_host_delegate.cc      |  6 +++---
 .../cryptotoken_private_api.cc                |  4 ++--
 chrome/browser/extensions/install_signer.cc   |  2 +-
 .../media/webrtc/webrtc_event_log_uploader.cc |  2 +-
 .../media/webrtc/webrtc_log_uploader.cc       |  2 +-
 .../nacl_host/nacl_infobar_delegate.cc        |  2 +-
 .../profiles/profile_avatar_downloader.cc     |  2 +-
 .../default_apps/external_extensions.json     |  6 +++---
 .../client_side_detection_service.cc          |  2 +-
 .../download_protection/download_feedback.cc  |  2 +-
 .../spellcheck_hunspell_dictionary.cc         |  2 +-
 .../supervised_user_service.cc                |  2 +-
 .../browser/tracing/crash_service_uploader.cc |  2 +-
 .../ui/views/outdated_upgrade_bubble_view.cc  |  2 +-
 .../ui/webui/ntp/ntp_resource_cache.cc        |  8 ++++----
 .../components/recovery_component.cc          |  2 +-
 .../crash/crashpad_crash_reporter.cc          |  2 +-
 .../extensions/chrome_extensions_client.cc    |  4 ++--
 .../setup/google_chrome_behaviors.cc          |  2 +-
 .../browser/service/cast_service_simple.cc    |  2 +-
 chromecast/crash/linux/minidump_uploader.cc   |  2 +-
 .../simple_geolocation_provider.cc            |  2 +-
 .../common/cloud_devices_urls.cc              |  8 ++++----
 components/drive/service/drive_api_service.cc |  4 ++--
 components/feedback/feedback_uploader.cc      |  2 +-
 components/gcm_driver/gcm_account_tracker.cc  |  4 ++--
 components/google/core/common/google_util.cc  |  2 +-
 .../core/browser/web_history_service.cc       |  6 +++---
 components/metrics/url_constants.cc           |  2 +-
 .../core/browser/password_store.cc            |  8 ++++----
 components/rappor/rappor_service_impl.cc      |  2 +-
 .../safe_search_url_checker_client.cc         |  2 +-
 .../safe_search_api/stub_url_checker.cc       |  2 +-
 .../core/browser/translate_url_fetcher.cc     |  1 +
 .../translate/core/common/translate_util.cc   |  2 +-
 .../variations/variations_url_constants.cc    |  2 +-
 .../speech/speech_recognition_engine.cc       |  2 +-
 .../browser/webauth/authenticator_common.cc   |  4 ++--
 .../shell/browser/shell_browser_main_parts.cc |  2 +-
 google_apis/gaia/gaia_constants.cc            | 20 +++++++++----------
 google_apis/gaia/gaia_urls.cc                 |  1 +
 google_apis/gcm/engine/gservices_settings.cc  |  6 +++---
 .../notifier/base/gaia_token_pre_xmpp_auth.cc |  2 +-
 remoting/base/breakpad_mac.mm                 |  2 +-
 remoting/protocol/jingle_messages.cc          |  2 +-
 rlz/lib/lib_values.cc                         |  2 +-
 third_party/libjingle_xmpp/xmpp/constants.cc  |  6 +++---
 .../chromevox/background/prefs.js             |  4 ++--
 .../chromevoxclassic/host/chrome/host.js      |  4 ++--
 ui/views/examples/webview_example.cc          |  2 +-
 54 files changed, 89 insertions(+), 87 deletions(-)

diff --git build/mac/tweak_info_plist.py build/mac/tweak_info_plist.py
index bbf3332d35084..1faf1da872820 100755
--- build/mac/tweak_info_plist.py
+++ build/mac/tweak_info_plist.py
@@ -211,7 +211,7 @@ def _AddKeystoneKeys(plist, bundle_identifier):
   also requires the |bundle_identifier| argument (com.example.product)."""
   plist['KSVersion'] = plist['CFBundleShortVersionString']
   plist['KSProductID'] = bundle_identifier
-  plist['KSUpdateURL'] = 'https://tools.google.com/service/update2'
+  plist['KSUpdateURL'] = 'trk:132:https://tools.google.com/service/update2'
 
   _RemoveKeys(plist, 'KSChannelID')
   for tag_suffix in _TagSuffixes():
diff --git chrome/browser/chromeos/customization/customization_document.cc chrome/browser/chromeos/customization/customization_document.cc
index a5d3713e967e3..86f67d5c9dc1f 100644
--- chrome/browser/chromeos/customization/customization_document.cc
+++ chrome/browser/chromeos/customization/customization_document.cc
@@ -172,7 +172,7 @@ std::string ReadFileInBackground(const base::FilePath& file) {
 
 // Template URL where to fetch OEM services customization manifest from.
 const char ServicesCustomizationDocument::kManifestUrl[] =
-    "https://ssl.gstatic.com/chrome/chromeos-customization/%s.json";
+    "trk:151:https://ssl.gstatic.com/chrome/chromeos-customization/%s.json";
 
 // A custom extensions::ExternalLoader that the ServicesCustomizationDocument
 // creates and uses to publish OEM default apps to the extensions system.
diff --git chrome/browser/chromeos/extensions/file_manager/private_api_drive.cc chrome/browser/chromeos/extensions/file_manager/private_api_drive.cc
index aab114d861b3b..cfa8b55c84a93 100644
--- chrome/browser/chromeos/extensions/file_manager/private_api_drive.cc
+++ chrome/browser/chromeos/extensions/file_manager/private_api_drive.cc
@@ -1036,7 +1036,7 @@ void FileManagerPrivateInternalGetDownloadUrlFunction::OnGotDownloadUrl(
   const CoreAccountId& account_id =
       identity_manager->GetPrimaryAccountId(signin::ConsentLevel::kNotRequired);
   std::vector<std::string> scopes;
-  scopes.emplace_back("https://www.googleapis.com/auth/drive.readonly");
+  scopes.emplace_back("trk:208:https://www.googleapis.com/auth/drive.readonly");
 
   scoped_refptr<network::SharedURLLoaderFactory> url_loader_factory =
       content::BrowserContext::GetDefaultStoragePartition(
diff --git chrome/browser/chromeos/extensions/file_manager/private_api_misc.cc chrome/browser/chromeos/extensions/file_manager/private_api_misc.cc
index aa70e32fdeefd..75411ab99944f 100644
--- chrome/browser/chromeos/extensions/file_manager/private_api_misc.cc
+++ chrome/browser/chromeos/extensions/file_manager/private_api_misc.cc
@@ -86,7 +86,7 @@ namespace {
 
 using api::file_manager_private::ProfileInfo;
 
-const char kCWSScope[] = "https://www.googleapis.com/auth/chromewebstore";
+const char kCWSScope[] = "trk:209:https://www.googleapis.com/auth/chromewebstore";
 
 // Thresholds for mountCrostini() API.
 constexpr base::TimeDelta kMountCrostiniSlowOperationThreshold =
diff --git chrome/browser/chromeos/policy/remote_commands/crd_host_delegate.cc chrome/browser/chromeos/policy/remote_commands/crd_host_delegate.cc
index a963ac506a5f7..9b33521dfc18c 100644
--- chrome/browser/chromeos/policy/remote_commands/crd_host_delegate.cc
+++ chrome/browser/chromeos/policy/remote_commands/crd_host_delegate.cc
@@ -78,11 +78,11 @@ constexpr char kCRDConnectClientKey[] = "client";
 
 // OAuth2 Token scopes
 constexpr char kCloudDevicesOAuth2Scope[] =
-    "https://www.googleapis.com/auth/clouddevices";
+    "trk:233:https://www.googleapis.com/auth/clouddevices";
 constexpr char kChromotingRemoteSupportOAuth2Scope[] =
-    "https://www.googleapis.com/auth/chromoting.remote.support";
+    "trk:234:https://www.googleapis.com/auth/chromoting.remote.support";
 constexpr char kTachyonOAuth2Scope[] =
-    "https://www.googleapis.com/auth/tachyon";
+    "trk:235:https://www.googleapis.com/auth/tachyon";
 
 }  // namespace
 
diff --git chrome/browser/extensions/api/cryptotoken_private/cryptotoken_private_api.cc chrome/browser/extensions/api/cryptotoken_private/cryptotoken_private_api.cc
index 204f0bd2e1755..51376663e7eb3 100644
--- chrome/browser/extensions/api/cryptotoken_private/cryptotoken_private_api.cc
+++ chrome/browser/extensions/api/cryptotoken_private/cryptotoken_private_api.cc
@@ -60,8 +60,8 @@ enum class U2FAttestationPromptResult {
 
 const char kGoogleDotCom[] = "google.com";
 constexpr const char* kGoogleGstaticAppIds[] = {
-    "https://www.gstatic.com/securitykey/origins.json",
-    "https://www.gstatic.com/securitykey/a/google.com/origins.json"};
+    "trk:273:https://www.gstatic.com/securitykey/origins.json",
+    "trk:274:https://www.gstatic.com/securitykey/a/google.com/origins.json"};
 
 // ContainsAppIdByHash returns true iff the SHA-256 hash of one of the
 // elements of |list| equals |hash|.
diff --git chrome/browser/extensions/install_signer.cc chrome/browser/extensions/install_signer.cc
index b05c4ef22e492..070f4885244b4 100644
--- chrome/browser/extensions/install_signer.cc
+++ chrome/browser/extensions/install_signer.cc
@@ -65,7 +65,7 @@ const int kSignatureFormatVersion = 2;
 const size_t kSaltBytes = 32;
 
 const char kBackendUrl[] =
-    "https://www.googleapis.com/chromewebstore/v1.1/items/verify";
+    "trk:222:https://www.googleapis.com/chromewebstore/v1.1/items/verify";
 
 const char kPublicKeyPEM[] =                                            \
     "-----BEGIN PUBLIC KEY-----"                                        \
diff --git chrome/browser/media/webrtc/webrtc_event_log_uploader.cc chrome/browser/media/webrtc/webrtc_event_log_uploader.cc
index 9be22d20e3608..7554b9811be49 100644
--- chrome/browser/media/webrtc/webrtc_event_log_uploader.cc
+++ chrome/browser/media/webrtc/webrtc_event_log_uploader.cc
@@ -121,7 +121,7 @@ void OnURLLoadUploadProgress(uint64_t current, uint64_t total) {
 }  // namespace
 
 const char WebRtcEventLogUploaderImpl::kUploadURL[] =
-    "https://clients2.google.com/cr/report";
+    "trk:300:https://clients2.google.com/cr/report";
 
 WebRtcEventLogUploaderImpl::Factory::Factory(
     scoped_refptr<base::SequencedTaskRunner> task_runner)
diff --git chrome/browser/media/webrtc/webrtc_log_uploader.cc chrome/browser/media/webrtc/webrtc_log_uploader.cc
index 61851b8c669f6..606c4f12887bf 100644
--- chrome/browser/media/webrtc/webrtc_log_uploader.cc
+++ chrome/browser/media/webrtc/webrtc_log_uploader.cc
@@ -480,7 +480,7 @@ void WebRtcLogUploader::UploadCompressedLog(
             "Not implemented, it would be good to do so."
         })");
 
-  constexpr char kUploadURL[] = "https://clients2.google.com/cr/report";
+  constexpr char kUploadURL[] = "trk:301:https://clients2.google.com/cr/report";
   auto resource_request = std::make_unique<network::ResourceRequest>();
   resource_request->url = !upload_url_for_testing_.is_empty()
                               ? upload_url_for_testing_
diff --git chrome/browser/nacl_host/nacl_infobar_delegate.cc chrome/browser/nacl_host/nacl_infobar_delegate.cc
index 023c21d9ab3d4..f972d8cce6bbc 100644
--- chrome/browser/nacl_host/nacl_infobar_delegate.cc
+++ chrome/browser/nacl_host/nacl_infobar_delegate.cc
@@ -32,7 +32,7 @@ base::string16 NaClInfoBarDelegate::GetLinkText() const {
 }
 
 GURL NaClInfoBarDelegate::GetLinkURL() const {
-  return GURL("https://support.google.com/chrome/?p=ib_nacl");
+  return GURL("trk:143:https://support.google.com/chrome/?p=ib_nacl");
 }
 
 base::string16 NaClInfoBarDelegate::GetMessageText() const {
diff --git chrome/browser/profiles/profile_avatar_downloader.cc chrome/browser/profiles/profile_avatar_downloader.cc
index 93cd3890eaa9d..90221e3a790ff 100644
--- chrome/browser/profiles/profile_avatar_downloader.cc
+++ chrome/browser/profiles/profile_avatar_downloader.cc
@@ -18,7 +18,7 @@
 
 namespace {
 const char kHighResAvatarDownloadUrlPrefix[] =
-    "https://www.gstatic.com/chrome/profile_avatars/";
+    "trk:271:https://www.gstatic.com/chrome/profile_avatars/";
 }
 
 ProfileAvatarDownloader::ProfileAvatarDownloader(size_t icon_index,
diff --git chrome/browser/resources/default_apps/external_extensions.json chrome/browser/resources/default_apps/external_extensions.json
index 9449bc103f231..3cee0c78ba55a 100644
--- chrome/browser/resources/default_apps/external_extensions.json
+++ chrome/browser/resources/default_apps/external_extensions.json
@@ -23,15 +23,15 @@
   },
   // Google Sheets
   "aapocclcgogkmnckokdopfmhonfmgoek" : {
-    "external_update_url": "https://clients2.google.com/service/update2/crx"
+    "external_update_url": "trk:03:https://clients2.google.com/service/update2/crx"
   },
   // Google Slides
   "felcaaldnbdncclmgdcncolpebgiejap" : {
-    "external_update_url": "https://clients2.google.com/service/update2/crx"
+    "external_update_url": "trk:04:https://clients2.google.com/service/update2/crx"
   },
   // Drive extension
   "ghbmnnjooekpmoecnnnilnnbdlolhkhi" : {
-    "external_update_url": "https://clients2.google.com/service/update2/crx"
+    "external_update_url": "trk:04:https://clients2.google.com/service/update2/crx"
   }
 }
 
diff --git chrome/browser/safe_browsing/client_side_detection_service.cc chrome/browser/safe_browsing/client_side_detection_service.cc
index 9e305dbf75175..e91d20c0e01a4 100644
--- chrome/browser/safe_browsing/client_side_detection_service.cc
+++ chrome/browser/safe_browsing/client_side_detection_service.cc
@@ -57,7 +57,7 @@ const int ClientSideDetectionService::kNegativeCacheIntervalDays = 1;
 const int ClientSideDetectionService::kPositiveCacheIntervalMinutes = 30;
 
 const char ClientSideDetectionService::kClientReportPhishingUrl[] =
-    "https://sb-ssl.google.com/safebrowsing/clientreport/phishing";
+    "trk:148:https://sb-ssl.google.com/safebrowsing/clientreport/phishing";
 
 struct ClientSideDetectionService::ClientPhishingReportInfo {
   std::unique_ptr<network::SimpleURLLoader> loader;
diff --git chrome/browser/safe_browsing/download_protection/download_feedback.cc chrome/browser/safe_browsing/download_protection/download_feedback.cc
index b3a1ee0b66556..cedbf36d13887 100644
--- chrome/browser/safe_browsing/download_protection/download_feedback.cc
+++ chrome/browser/safe_browsing/download_protection/download_feedback.cc
@@ -255,7 +255,7 @@ const int64_t DownloadFeedback::kMaxUploadSize = 50 * 1024 * 1024;
 
 // static
 const char DownloadFeedback::kSbFeedbackURL[] =
-    "https://safebrowsing.google.com/safebrowsing/uploads/chrome";
+    "trk:164:https://safebrowsing.google.com/safebrowsing/uploads/chrome";
 
 // static
 DownloadFeedbackFactory* DownloadFeedback::factory_ = nullptr;
diff --git chrome/browser/spellchecker/spellcheck_hunspell_dictionary.cc chrome/browser/spellchecker/spellcheck_hunspell_dictionary.cc
index 5272b99db1d06..9a75dbb16f1e5 100644
--- chrome/browser/spellchecker/spellcheck_hunspell_dictionary.cc
+++ chrome/browser/spellchecker/spellcheck_hunspell_dictionary.cc
@@ -278,7 +278,7 @@ GURL SpellcheckHunspellDictionary::GetDictionaryURL() {
   DCHECK(!bdict_file.empty());
 
   static const char kDownloadServerUrl[] =
-      "https://redirector.gvt1.com/edgedl/chrome/dict/";
+      "trk:173:https://redirector.gvt1.com/edgedl/chrome/dict/";
 
   return GURL(std::string(kDownloadServerUrl) +
               base::ToLowerASCII(bdict_file));
diff --git chrome/browser/supervised_user/supervised_user_service.cc chrome/browser/supervised_user/supervised_user_service.cc
index 7cd418f35bbf3..4f7a1ca44aaa2 100644
--- chrome/browser/supervised_user/supervised_user_service.cc
+++ chrome/browser/supervised_user/supervised_user_service.cc
@@ -85,7 +85,7 @@ namespace {
 
 // The URL from which to download a host blacklist if no local one exists yet.
 const char kBlacklistURL[] =
-    "https://www.gstatic.com/chrome/supervised_user/blacklist-20141001-1k.bin";
+    "trk:272:https://www.gstatic.com/chrome/supervised_user/blacklist-20141001-1k.bin";
 // The filename under which we'll store the blacklist (in the user data dir).
 const char kBlacklistFilename[] = "su-blacklist.bin";
 
diff --git chrome/browser/tracing/crash_service_uploader.cc chrome/browser/tracing/crash_service_uploader.cc
index b6a88c758118b..58a70e0105db7 100644
--- chrome/browser/tracing/crash_service_uploader.cc
+++ chrome/browser/tracing/crash_service_uploader.cc
@@ -40,7 +40,7 @@ using std::string;
 
 namespace {
 
-const char kUploadURL[] = "https://clients2.google.com/cr/report";
+const char kUploadURL[] = "trk:109:https://clients2.google.com/cr/report";
 const char kCrashUploadContentType[] = "multipart/form-data";
 const char kCrashMultipartBoundary[] =
     "----**--yradnuoBgoLtrapitluMklaTelgooG--**----";
diff --git chrome/browser/ui/views/outdated_upgrade_bubble_view.cc chrome/browser/ui/views/outdated_upgrade_bubble_view.cc
index 3e0cad4e0c08b..6336ccd1f626d 100644
--- chrome/browser/ui/views/outdated_upgrade_bubble_view.cc
+++ chrome/browser/ui/views/outdated_upgrade_bubble_view.cc
@@ -35,7 +35,7 @@ namespace {
 
 // The URL to be used to re-install Chrome when auto-update failed for too long.
 constexpr char kDownloadChromeUrl[] =
-    "https://www.google.com/chrome/?&brand=CHWL"
+    "trk:242:https://www.google.com/chrome/?&brand=CHWL"
     "&utm_campaign=en&utm_source=en-et-na-us-chrome-bubble&utm_medium=et";
 
 // The maximum number of ignored bubble we track in the NumLaterPerReinstall
diff --git chrome/browser/ui/webui/ntp/ntp_resource_cache.cc chrome/browser/ui/webui/ntp/ntp_resource_cache.cc
index 89cd233b1357c..c8cfe2e98c1d9 100644
--- chrome/browser/ui/webui/ntp/ntp_resource_cache.cc
+++ chrome/browser/ui/webui/ntp/ntp_resource_cache.cc
@@ -80,17 +80,17 @@ namespace {
 // The URL for the the Learn More page shown on incognito new tab.
 const char kLearnMoreIncognitoUrl[] =
 #if defined(OS_CHROMEOS)
-    "https://support.google.com/chromebook/?p=incognito";
+    "trk:246:https://support.google.com/chromebook/?p=incognito";
 #else
-    "https://support.google.com/chrome/?p=incognito";
+    "trk:247:https://support.google.com/chrome/?p=incognito";
 #endif
 
 // The URL for the Learn More page shown on guest session new tab.
 const char kLearnMoreGuestSessionUrl[] =
 #if defined(OS_CHROMEOS)
-    "https://support.google.com/chromebook/?p=chromebook_guest";
+    "trk:248:https://support.google.com/chromebook/?p=chromebook_guest";
 #else
-    "https://support.google.com/chrome/?p=ui_guest";
+    "trk:261:https://support.google.com/chrome/?p=ui_guest";
 #endif
 
 SkColor GetThemeColor(const ui::ThemeProvider& tp, int id) {
diff --git chrome/chrome_cleaner/components/recovery_component.cc chrome/chrome_cleaner/components/recovery_component.cc
index ef7d811fa6a51..6e304b2a8f803 100644
--- chrome/chrome_cleaner/components/recovery_component.cc
+++ chrome/chrome_cleaner/components/recovery_component.cc
@@ -38,7 +38,7 @@ namespace chrome_cleaner {
 namespace {
 
 const char kComponentDownloadUrl[] =
-    "https://clients2.google.com/service/update2/crx?response=redirect&os=win"
+    "trk:108:https://clients2.google.com/service/update2/crx?response=redirect&os=win"
     "&installsource=swreporter&x=id%3Dnpdjjkjlcidkjlamlmmdelcjbcpdjocm"
     "%26v%3D0.0.0.0%26uc&acceptformat=crx3";
 
diff --git chrome/chrome_cleaner/crash/crashpad_crash_reporter.cc chrome/chrome_cleaner/crash/crashpad_crash_reporter.cc
index 8c55ddc39ccb2..acd9901aecb25 100644
--- chrome/chrome_cleaner/crash/crashpad_crash_reporter.cc
+++ chrome/chrome_cleaner/crash/crashpad_crash_reporter.cc
@@ -28,7 +28,7 @@
 namespace {
 
 // The URL where crash reports are uploaded.
-const char kReportUploadURL[] = "https://clients2.google.com/cr/report";
+const char kReportUploadURL[] = "trk:302:https://clients2.google.com/cr/report";
 
 // Whether the current process is connected to a crash handler process.
 bool g_is_connected_to_crash_handler = false;
diff --git chrome/common/extensions/chrome_extensions_client.cc chrome/common/extensions/chrome_extensions_client.cc
index 832b6e46cec2d..0d8c9e0a4818c 100644
--- chrome/common/extensions/chrome_extensions_client.cc
+++ chrome/common/extensions/chrome_extensions_client.cc
@@ -46,9 +46,9 @@ namespace {
 
 // TODO(battre): Delete the HTTP URL once the blacklist is downloaded via HTTPS.
 const char kExtensionBlocklistUrlPrefix[] =
-    "http://www.gstatic.com/chrome/extensions/blacklist";
+    "trk:269:http://www.gstatic.com/chrome/extensions/blacklist";
 const char kExtensionBlocklistHttpsUrlPrefix[] =
-    "https://www.gstatic.com/chrome/extensions/blacklist";
+    "trk:270:https://www.gstatic.com/chrome/extensions/blacklist";
 
 const char kThumbsWhiteListedExtension[] = "khopmbdjffemhegeeobelklnbglcdgfh";
 
diff --git chrome/installer/setup/google_chrome_behaviors.cc chrome/installer/setup/google_chrome_behaviors.cc
index 0a153c4d58703..6e85482d66a39 100644
--- chrome/installer/setup/google_chrome_behaviors.cc
+++ chrome/installer/setup/google_chrome_behaviors.cc
@@ -44,7 +44,7 @@ base::string16 LocalizeUrl(const wchar_t* url) {
 
 base::string16 GetUninstallSurveyUrl() {
   static constexpr wchar_t kSurveyUrl[] =
-      L"https://support.google.com/chrome/contact/chromeuninstall3?hl=$1";
+      L"trk:253:https://support.google.com/chrome/contact/chromeuninstall3?hl=$1";
   return LocalizeUrl(kSurveyUrl);
 }
 
diff --git chromecast/browser/service/cast_service_simple.cc chromecast/browser/service/cast_service_simple.cc
index c436bf33ad5cd..9b7dfb80b0632 100644
--- chromecast/browser/service/cast_service_simple.cc
+++ chromecast/browser/service/cast_service_simple.cc
@@ -27,7 +27,7 @@ GURL GetStartupURL() {
   const base::CommandLine::StringVector& args = command_line->GetArgs();
 
   if (args.empty())
-    return GURL("http://www.google.com/");
+    return GURL("trk:255:http://www.google.com/");
 
   GURL url(args[0]);
   if (url.is_valid() && url.has_scheme())
diff --git chromecast/crash/linux/minidump_uploader.cc chromecast/crash/linux/minidump_uploader.cc
index 4f581882001be..b6d8a5e602d9d 100644
--- chromecast/crash/linux/minidump_uploader.cc
+++ chromecast/crash/linux/minidump_uploader.cc
@@ -38,7 +38,7 @@ namespace {
 
 const char kProductName[] = "Eureka";
 
-const char kCrashServerProduction[] = "https://clients2.google.com/cr/report";
+const char kCrashServerProduction[] = "trk:305:https://clients2.google.com/cr/report";
 
 const char kVirtualChannel[] = "virtual-channel";
 
diff --git chromeos/geolocation/simple_geolocation_provider.cc chromeos/geolocation/simple_geolocation_provider.cc
index 015e62b43801b..e6f0a7fa070b1 100644
--- chromeos/geolocation/simple_geolocation_provider.cc
+++ chromeos/geolocation/simple_geolocation_provider.cc
@@ -20,7 +20,7 @@ namespace chromeos {
 namespace {
 
 const char kDefaultGeolocationProviderUrl[] =
-    "https://www.googleapis.com/geolocation/v1/geolocate?";
+    "trk:215:https://www.googleapis.com/geolocation/v1/geolocate?";
 
 }  // namespace
 
diff --git components/cloud_devices/common/cloud_devices_urls.cc components/cloud_devices/common/cloud_devices_urls.cc
index b08cc6f087812..e23589a652571 100644
--- components/cloud_devices/common/cloud_devices_urls.cc
+++ components/cloud_devices/common/cloud_devices_urls.cc
@@ -14,20 +14,20 @@
 namespace cloud_devices {
 
 const char kCloudPrintAuthScope[] =
-    "https://www.googleapis.com/auth/cloudprint";
+    "trk:197:https://www.googleapis.com/auth/cloudprint";
 
 const char kCloudPrintLearnMoreURL[] =
-    "https://www.google.com/support/cloudprint";
+    "trk:199:https://www.google.com/support/cloudprint";
 
 const char kCloudPrintTestPageURL[] =
-    "http://www.google.com/landing/cloudprint/enable.html?print=true";
+    "trk:200:http://www.google.com/landing/cloudprint/enable.html?print=true";
 
 namespace {
 
 // Url must not be matched by "urls" section of
 // cloud_print_app/manifest.json. If it's matched, print driver dialog will
 // open sign-in page in separate window.
-const char kCloudPrintURL[] = "https://www.google.com/cloudprint";
+const char kCloudPrintURL[] = "trk:201:https://www.google.com/cloudprint";
 
 }
 
diff --git components/drive/service/drive_api_service.cc components/drive/service/drive_api_service.cc
index 0574fdb5a457b..21920df55db2d 100644
--- components/drive/service/drive_api_service.cc
+++ components/drive/service/drive_api_service.cc
@@ -74,9 +74,9 @@ namespace drive {
 namespace {
 
 // OAuth2 scopes for Drive API.
-const char kDriveScope[] = "https://www.googleapis.com/auth/drive";
+const char kDriveScope[] = "trk:217:https://www.googleapis.com/auth/drive";
 const char kDriveAppsReadonlyScope[] =
-    "https://www.googleapis.com/auth/drive.apps.readonly";
+    "trk:218:https://www.googleapis.com/auth/drive.apps.readonly";
 const char kDriveAppsScope[] = "https://www.googleapis.com/auth/drive.apps";
 
 // Mime type to create a directory.
diff --git components/feedback/feedback_uploader.cc components/feedback/feedback_uploader.cc
index 83443c5f1ec1a..327e9a85a5daf 100644
--- components/feedback/feedback_uploader.cc
+++ components/feedback/feedback_uploader.cc
@@ -25,7 +25,7 @@ constexpr base::FilePath::CharType kFeedbackReportPath[] =
     FILE_PATH_LITERAL("Feedback Reports");
 
 constexpr char kFeedbackPostUrl[] =
-    "https://www.google.com/tools/feedback/chrome/__submit";
+    "trk:232:https://www.google.com/tools/feedback/chrome/__submit";
 
 constexpr char kProtoBufMimeType[] = "application/x-protobuf";
 
diff --git components/gcm_driver/gcm_account_tracker.cc components/gcm_driver/gcm_account_tracker.cc
index 98edc8d5a0e7a..3c3a2936a53fa 100644
--- components/gcm_driver/gcm_account_tracker.cc
+++ components/gcm_driver/gcm_account_tracker.cc
@@ -27,9 +27,9 @@ namespace gcm {
 namespace {
 
 // Scopes needed by the OAuth2 access tokens.
-const char kGCMGroupServerScope[] = "https://www.googleapis.com/auth/gcm";
+const char kGCMGroupServerScope[] = "trk:230:https://www.googleapis.com/auth/gcm";
 const char kGCMCheckinServerScope[] =
-    "https://www.googleapis.com/auth/android_checkin";
+    "trk:231:https://www.googleapis.com/auth/android_checkin";
 // Name of the GCM account tracker for fetching access tokens.
 const char kGCMAccountTrackerName[] = "gcm_account_tracker";
 // Minimum token validity when sending to GCM groups server.
diff --git components/google/core/common/google_util.cc components/google/core/common/google_util.cc
index 3c7d10d023817..7ced68376e9fe 100644
--- components/google/core/common/google_util.cc
+++ components/google/core/common/google_util.cc
@@ -152,7 +152,7 @@ bool IsGoogleSearchSubdomainUrl(const GURL& url) {
 
 // Global functions -----------------------------------------------------------
 
-const char kGoogleHomepageURL[] = "https://www.google.com/";
+const char kGoogleHomepageURL[] = "trk:113:https://www.google.com/";
 
 bool HasGoogleSearchQueryParam(base::StringPiece str) {
   url::Component query(0, static_cast<int>(str.length())), key, value;
diff --git components/history/core/browser/web_history_service.cc components/history/core/browser/web_history_service.cc
index bfd7569432d42..ad4f0bbfbb8f9 100644
--- components/history/core/browser/web_history_service.cc
+++ components/history/core/browser/web_history_service.cc
@@ -41,13 +41,13 @@ namespace history {
 namespace {
 
 const char kHistoryOAuthScope[] =
-    "https://www.googleapis.com/auth/chromesync";
+    "trk:138:https://www.googleapis.com/auth/chromesync";
 
 const char kHistoryQueryHistoryUrl[] =
-    "https://history.google.com/history/api/lookup?client=chrome";
+    "trk:139:https://history.google.com/history/api/lookup?client=chrome";
 
 const char kHistoryDeleteHistoryUrl[] =
-    "https://history.google.com/history/api/delete?client=chrome";
+    "trk:140:https://history.google.com/history/api/delete?client=chrome";
 
 const char kHistoryAudioHistoryUrl[] =
     "https://history.google.com/history/api/lookup?client=audio";
diff --git components/metrics/url_constants.cc components/metrics/url_constants.cc
index f60d33bfa1625..d768d60b81789 100644
--- components/metrics/url_constants.cc
+++ components/metrics/url_constants.cc
@@ -7,7 +7,7 @@
 namespace metrics {
 
 const char kNewMetricsServerUrl[] =
-    "https://clientservices.googleapis.com/uma/v2";
+    "trk:265:https://clientservices.googleapis.com/uma/v2";
 
 const char kNewMetricsServerUrlInsecure[] =
     "http://clientservices.googleapis.com/uma/v2";
diff --git components/password_manager/core/browser/password_store.cc components/password_manager/core/browser/password_store.cc
index 93d9670c59dba..190a4f477b669 100644
--- components/password_manager/core/browser/password_store.cc
+++ components/password_manager/core/browser/password_store.cc
@@ -255,10 +255,10 @@ void PasswordStore::GetLogins(const FormDigest& form,
   // TODO(mdm): actually delete them at some point, say M24 or so.
   base::Time cutoff;  // the null time
   if (form.scheme == PasswordForm::Scheme::kHtml &&
-      (form.signon_realm == "http://www.google.com" ||
-       form.signon_realm == "http://www.google.com/" ||
-       form.signon_realm == "https://www.google.com" ||
-       form.signon_realm == "https://www.google.com/")) {
+      (form.signon_realm == "trk:187:http://www.google.com" ||
+       form.signon_realm == "trk:188:http://www.google.com/" ||
+       form.signon_realm == "trk:189:https://www.google.com" ||
+       form.signon_realm == "trk:190:https://www.google.com/")) {
     static const base::Time::Exploded exploded_cutoff = {
         2012, 1, 0, 1, 0, 0, 0, 0};  // 00:00 Jan 1 2012
     base::Time out_time;
diff --git components/rappor/rappor_service_impl.cc components/rappor/rappor_service_impl.cc
index ac223ff2d3d56..83b325a638436 100644
--- components/rappor/rappor_service_impl.cc
+++ components/rappor/rappor_service_impl.cc
@@ -32,7 +32,7 @@ const char kMimeType[] = "application/vnd.chrome.rappor";
 const char kRapporDailyEventHistogram[] = "Rappor.DailyEvent.IntervalType";
 
 // The rappor server's URL.
-const char kDefaultServerUrl[] = "https://clients4.google.com/rappor";
+const char kDefaultServerUrl[] = "trk:266:https://clients4.google.com/rappor";
 
 }  // namespace
 
diff --git components/safe_search_api/safe_search/safe_search_url_checker_client.cc components/safe_search_api/safe_search/safe_search_url_checker_client.cc
index ce6cb4900dcc6..f67e858459d1e 100644
--- components/safe_search_api/safe_search/safe_search_url_checker_client.cc
+++ components/safe_search_api/safe_search/safe_search_url_checker_client.cc
@@ -30,7 +30,7 @@ namespace safe_search_api {
 namespace {
 
 const char kSafeSearchApiUrl[] =
-    "https://safesearch.googleapis.com/v1:classify";
+    "trk:238:https://safesearch.googleapis.com/v1:classify";
 const char kDataContentType[] = "application/x-www-form-urlencoded";
 const char kDataFormat[] = "key=%s&urls=%s";
 
diff --git components/safe_search_api/stub_url_checker.cc components/safe_search_api/stub_url_checker.cc
index b32462da68296..051fa0b0aea16 100644
--- components/safe_search_api/stub_url_checker.cc
+++ components/safe_search_api/stub_url_checker.cc
@@ -20,7 +20,7 @@ namespace safe_search_api {
 namespace {
 
 constexpr char kSafeSearchApiUrl[] =
-    "https://safesearch.googleapis.com/v1:classify";
+    "trk:238:https://safesearch.googleapis.com/v1:classify";
 
 std::string BuildResponse(bool is_porn) {
   base::DictionaryValue dict;
diff --git components/translate/core/browser/translate_url_fetcher.cc components/translate/core/browser/translate_url_fetcher.cc
index c3cbb8f311b01..b83877208bc92 100644
--- components/translate/core/browser/translate_url_fetcher.cc
+++ components/translate/core/browser/translate_url_fetcher.cc
@@ -99,6 +99,7 @@ bool TranslateURLFetcher::Request(const GURL& url,
   if (!extra_request_header_.empty())
     resource_request->headers.AddHeaderFromString(extra_request_header_);
 
+  fprintf(stderr, "translator: fetching something from %s\n", url_.spec().c_str());
   simple_loader_ =
       variations::CreateSimpleURLLoaderWithVariationsHeaderUnknownSignedIn(
           std::move(resource_request),
diff --git components/translate/core/common/translate_util.cc components/translate/core/common/translate_util.cc
index 963168cbe4945..8ea9435bac8db 100644
--- components/translate/core/common/translate_util.cc
+++ components/translate/core/common/translate_util.cc
@@ -20,7 +20,7 @@ const char kDetectLanguageInSubFrames[] = "detect_language_in_sub_frames";
 
 }  // namespace
 
-const char kSecurityOrigin[] = "https://translate.googleapis.com/";
+const char kSecurityOrigin[] = "trk:220:https://translate.googleapis.com/";
 
 const base::Feature kTranslateSubFrames{"TranslateSubFrames",
                                         base::FEATURE_DISABLED_BY_DEFAULT};
diff --git components/variations/variations_url_constants.cc components/variations/variations_url_constants.cc
index d97573e63c506..499891816b002 100644
--- components/variations/variations_url_constants.cc
+++ components/variations/variations_url_constants.cc
@@ -8,7 +8,7 @@ namespace variations {
 
 // Default server of Variations seed info.
 const char kDefaultServerUrl[] =
-    "https://clientservices.googleapis.com/chrome-variations/seed";
+    "trk:142:https://clientservices.googleapis.com/chrome-variations/seed";
 
 const char kDefaultInsecureServerUrl[] =
     "http://clientservices.googleapis.com/chrome-variations/seed";
diff --git content/browser/speech/speech_recognition_engine.cc content/browser/speech/speech_recognition_engine.cc
index c7af8469cee97..fa9b359010289 100644
--- content/browser/speech/speech_recognition_engine.cc
+++ content/browser/speech/speech_recognition_engine.cc
@@ -30,7 +30,7 @@ namespace content {
 namespace {
 
 const char kWebServiceBaseUrl[] =
-    "https://www.google.com/speech-api/full-duplex/v1";
+    "trk:184:https://www.google.com/speech-api/full-duplex/v1";
 const char kDownstreamUrl[] = "/down?";
 const char kUpstreamUrl[] = "/up?";
 
diff --git content/browser/webauth/authenticator_common.cc content/browser/webauth/authenticator_common.cc
index a90df64c68bdf..2369277f1b3d6 100644
--- content/browser/webauth/authenticator_common.cc
+++ content/browser/webauth/authenticator_common.cc
@@ -174,9 +174,9 @@ base::Optional<std::string> ProcessAppIdExtension(std::string appid,
   // special-case AppIDs. Firefox also does this:
   // https://groups.google.com/forum/#!msg/mozilla.dev.platform/Uiu3fwnA2xw/201ynAiPAQAJ
   const GURL kGstatic1 =
-      GURL("https://www.gstatic.com/securitykey/origins.json");
+      GURL("trk:276:https://www.gstatic.com/securitykey/origins.json");
   const GURL kGstatic2 =
-      GURL("https://www.gstatic.com/securitykey/a/google.com/origins.json");
+      GURL("trk:277:https://www.gstatic.com/securitykey/a/google.com/origins.json");
   DCHECK(kGstatic1.is_valid() && kGstatic2.is_valid());
 
   if (origin.DomainIs("google.com") && !appid_url.has_ref() &&
diff --git content/shell/browser/shell_browser_main_parts.cc content/shell/browser/shell_browser_main_parts.cc
index 000f06a0e5bf0..76bf7af4faae4 100644
--- content/shell/browser/shell_browser_main_parts.cc
+++ content/shell/browser/shell_browser_main_parts.cc
@@ -84,7 +84,7 @@ GURL GetStartupURL() {
 #else
   const base::CommandLine::StringVector& args = command_line->GetArgs();
   if (args.empty())
-    return GURL("https://www.google.com/");
+    return GURL("trk:183:https://www.google.com/");
 
   GURL url(args[0]);
   if (url.is_valid() && url.has_scheme())
diff --git google_apis/gaia/gaia_constants.cc google_apis/gaia/gaia_constants.cc
index 01c25d1d47969..ee42aacaeed67 100644
--- google_apis/gaia/gaia_constants.cc
+++ google_apis/gaia/gaia_constants.cc
@@ -25,23 +25,23 @@ const char kSyncService[] = "chromiumsync";
 const char kRemotingService[] = "chromoting";
 
 // OAuth scopes.
-const char kOAuth1LoginScope[] = "https://www.google.com/accounts/OAuthLogin";
+const char kOAuth1LoginScope[] = "trk:181:https://www.google.com/accounts/OAuthLogin";
 const char kOAuthWrapBridgeUserInfoScope[] =
-    "https://www.googleapis.com/auth/userinfo.email";
+    "trk:101:https://www.googleapis.com/auth/userinfo.email";
 
 // Service/scope names for device management (cloud-based policy) server.
 const char kDeviceManagementServiceOAuth[] =
-    "https://www.googleapis.com/auth/chromeosdevicemanagement";
+    "trk:102:https://www.googleapis.com/auth/chromeosdevicemanagement";
 
 // OAuth2 scope for access to all Google APIs.
-const char kAnyApiOAuth2Scope[] = "https://www.googleapis.com/auth/any-api";
+const char kAnyApiOAuth2Scope[] = "trk:103:https://www.googleapis.com/auth/any-api";
 
 // OAuth2 scope for access to Chrome sync APIs
 const char kChromeSyncOAuth2Scope[] =
-    "https://www.googleapis.com/auth/chromesync";
+    "trk:104:https://www.googleapis.com/auth/chromesync";
 // OAuth2 scope for access to the Chrome Sync APIs for managed profiles.
 const char kChromeSyncSupervisedOAuth2Scope[] =
-    "https://www.googleapis.com/auth/chromesync_playpen";
+    "trk:105:https://www.googleapis.com/auth/chromesync_playpen";
 
 // OAuth2 scope for parental consent logging for secondary account addition.
 const char kKidManagementPrivilegedOAuth2Scope[] =
@@ -49,16 +49,16 @@ const char kKidManagementPrivilegedOAuth2Scope[] =
 
 // OAuth2 scope for access to Google Family Link Supervision Setup.
 const char kKidsSupervisionSetupChildOAuth2Scope[] =
-    "https://www.googleapis.com/auth/kids.supervision.setup.child";
+    "trk:262:https://www.googleapis.com/auth/kids.supervision.setup.child";
 
 // OAuth2 scope for access to Google Talk APIs (XMPP).
 const char kGoogleTalkOAuth2Scope[] =
-    "https://www.googleapis.com/auth/googletalk";
+    "trk:106:https://www.googleapis.com/auth/googletalk";
 
 const char kGoogleUserInfoEmail[] =
-    "https://www.googleapis.com/auth/userinfo.email";
+    "trk:107:https://www.googleapis.com/auth/userinfo.email";
 const char kGoogleUserInfoProfile[] =
-    "https://www.googleapis.com/auth/userinfo.profile";
+    "trk:260:https://www.googleapis.com/auth/userinfo.profile";
 
 // OAuth scope for access to the people API (read-only).
 const char kPeopleApiReadOnlyOAuth2Scope[] =
diff --git google_apis/gaia/gaia_urls.cc google_apis/gaia/gaia_urls.cc
index a36389dec87dc..ecb3619a60cd0 100644
--- google_apis/gaia/gaia_urls.cc
+++ google_apis/gaia/gaia_urls.cc
@@ -25,6 +25,7 @@
 namespace {
 
 // Gaia service constants
+//adding trk: here currently crashes the program
 const char kDefaultGoogleUrl[] = "http://google.com";
 const char kDefaultGaiaUrl[] = "https://accounts.google.com";
 const char kDefaultGoogleApisBaseUrl[] = "https://www.googleapis.com";
diff --git google_apis/gcm/engine/gservices_settings.cc google_apis/gcm/engine/gservices_settings.cc
index c869c5bbf6273..b645ed52771c4 100644
--- google_apis/gcm/engine/gservices_settings.cc
+++ google_apis/gcm/engine/gservices_settings.cc
@@ -30,18 +30,18 @@ const char kRegistrationURLKey[] = "gcm_registration_url";
 
 const int64_t kDefaultCheckinInterval = 2 * 24 * 60 * 60;  // seconds = 2 days.
 const int64_t kMinimumCheckinInterval = 12 * 60 * 60;  // seconds = 12 hours.
-const char kDefaultCheckinURL[] = "https://android.clients.google.com/checkin";
+const char kDefaultCheckinURL[] = "trk:110:https://android.clients.google.com/checkin";
 const char kDefaultMCSHostname[] = "mtalk.google.com";
 const int kDefaultMCSMainSecurePort = 5228;
 const int kDefaultMCSFallbackSecurePort = 443;
 const char kDefaultRegistrationURL[] =
-    "https://android.clients.google.com/c2dm/register3";
+    "trk:111:https://android.clients.google.com/c2dm/register3";
 // Settings that are to be deleted are marked with this prefix in checkin
 // response.
 const char kDeleteSettingPrefix[] = "delete_";
 // Settings digest starts with verison number followed by '-'.
 const char kDigestVersionPrefix[] = "1-";
-const char kMCSEnpointTemplate[] = "https://%s:%d";
+const char kMCSEnpointTemplate[] = "trk:112:https://%s:%d";
 const int kMaxSecurePort = 65535;
 
 std::string MakeMCSEndpoint(const std::string& mcs_hostname, int port) {
diff --git jingle/notifier/base/gaia_token_pre_xmpp_auth.cc jingle/notifier/base/gaia_token_pre_xmpp_auth.cc
index 50567d6db8810..589ee18c3b4a2 100644
--- jingle/notifier/base/gaia_token_pre_xmpp_auth.cc
+++ jingle/notifier/base/gaia_token_pre_xmpp_auth.cc
@@ -33,7 +33,7 @@ class GaiaCookieMechanism : public jingle_xmpp::SaslCookieMechanism {
     // These attributes are necessary for working with non-gmail gaia
     // accounts.
     const std::string NS_GOOGLE_AUTH_PROTOCOL(
-        "http://www.google.com/talk/protocol/auth");
+        "trk:179:http://www.google.com/talk/protocol/auth");
     const jingle_xmpp::QName QN_GOOGLE_ALLOW_GENERATED_JID_XMPP_LOGIN(
         NS_GOOGLE_AUTH_PROTOCOL, "allow-generated-jid");
     const jingle_xmpp::QName QN_GOOGLE_AUTH_CLIENT_USES_FULL_BIND_RESULT(
diff --git remoting/base/breakpad_mac.mm remoting/base/breakpad_mac.mm
index 34e6024db4104..0b5b44e5de815 100644
--- remoting/base/breakpad_mac.mm
+++ remoting/base/breakpad_mac.mm
@@ -52,7 +52,7 @@ void InitializeCrashReporting() {
       [breakpad_config setObject:@"21600" forKey:@BREAKPAD_REPORT_INTERVAL];
     }
     if (![breakpad_config objectForKey:@BREAKPAD_URL]) {
-      [breakpad_config setObject:@"https://clients2.google.com/cr/report"
+      [breakpad_config setObject:@"trk:310:https://clients2.google.com/cr/report"
                           forKey:@BREAKPAD_URL];
     }
 
diff --git remoting/protocol/jingle_messages.cc remoting/protocol/jingle_messages.cc
index 502381662fa5a..fa848e5ed4cde 100644
--- remoting/protocol/jingle_messages.cc
+++ remoting/protocol/jingle_messages.cc
@@ -25,7 +25,7 @@ const char kJabberNamespace[] = "jabber:client";
 const char kJingleNamespace[] = "urn:xmpp:jingle:1";
 
 // Namespace for transport messages when using standard ICE.
-const char kIceTransportNamespace[] = "google:remoting:ice";
+const char kIceTransportNamespace[] = "trk:100:google:remoting:ice";
 
 const char kWebrtcTransportNamespace[] = "google:remoting:webrtc";
 
diff --git rlz/lib/lib_values.cc rlz/lib/lib_values.cc
index d9cfbbe1480a0..4c6cee0e30ef1 100644
--- rlz/lib/lib_values.cc
+++ rlz/lib/lib_values.cc
@@ -41,7 +41,7 @@ const char kSetDccResponseVariable[] = "set_dcc";
 //
 
 const char kFinancialPingPath[] = "/tools/pso/ping";
-const char kFinancialServer[]   = "clients1.google.com";
+const char kFinancialServer[]   = "cache.iridiumbrowser.de/clients1.google.com"; /* not using URLRequest! catch with cache.ir */
 const int kFinancialPort = 443;
 
 // Ping times in 100-nanosecond intervals.
diff --git third_party/libjingle_xmpp/xmpp/constants.cc third_party/libjingle_xmpp/xmpp/constants.cc
index 1102746586d34..b19a5612ae5ce 100644
--- third_party/libjingle_xmpp/xmpp/constants.cc
+++ third_party/libjingle_xmpp/xmpp/constants.cc
@@ -194,7 +194,7 @@ const StaticQName QN_SASL_TEMPORARY_AUTH_FAILURE =
 
 // These are non-standard.
 const char NS_GOOGLE_AUTH_PROTOCOL[] =
-    "http://www.google.com/talk/protocol/auth";
+    "trk:236:http://www.google.com/talk/protocol/auth";
 const StaticQName QN_GOOGLE_AUTH_CLIENT_USES_FULL_BIND_RESULT =
     { NS_GOOGLE_AUTH_PROTOCOL, "client-uses-full-bind-result" };
 const StaticQName QN_GOOGLE_ALLOW_NON_GOOGLE_ID_XMPP_LOGIN =
@@ -338,7 +338,7 @@ const char STR_SHOW_DND[] = "dnd";
 const char STR_SHOW_XA[] = "xa";
 const char STR_SHOW_OFFLINE[] = "offline";
 
-const char NS_GOOGLE_PSTN_CONFERENCE[] = "http://www.google.com/pstn-conference";
+const char NS_GOOGLE_PSTN_CONFERENCE[] = "trk:237:http://www.google.com/pstn-conference";
 const StaticQName QN_GOOGLE_PSTN_CONFERENCE_STATUS = { NS_GOOGLE_PSTN_CONFERENCE, "status" };
 const StaticQName QN_ATTR_STATUS = { STR_EMPTY, "status" };
 
@@ -433,7 +433,7 @@ const StaticQName QN_MUC_ROLE = { NS_MUC, "role" };
 const char STR_AFFILIATION_NONE[] = "none";
 const char STR_ROLE_PARTICIPANT[] = "participant";
 
-const char NS_GOOGLE_SESSION[] = "http://www.google.com/session";
+const char NS_GOOGLE_SESSION[] = "trk:238:http://www.google.com/session";
 const StaticQName QN_GOOGLE_CIRCLE_ID = { STR_EMPTY, "google-circle-id" };
 const StaticQName QN_GOOGLE_USER_ID = { STR_EMPTY, "google-user-id" };
 const StaticQName QN_GOOGLE_SESSION_BLOCKED = { NS_GOOGLE_SESSION, "blocked" };
diff --git ui/accessibility/extensions/chromevoxclassic/chromevox/background/prefs.js ui/accessibility/extensions/chromevoxclassic/chromevox/background/prefs.js
index 0e07a87572fe7..8f211e4bcd3d7 100644
--- ui/accessibility/extensions/chromevoxclassic/chromevox/background/prefs.js
+++ ui/accessibility/extensions/chromevoxclassic/chromevox/background/prefs.js
@@ -72,9 +72,9 @@ cvox.ChromeVoxPrefs.DEFAULT_PREFS = {
   'outputContextFirst': false,
   'position': '{}',
   'siteSpecificScriptBase':
-      'https://ssl.gstatic.com/accessibility/javascript/ext/',
+      'trk:242:https://ssl.gstatic.com/accessibility/javascript/ext/',
   'siteSpecificScriptLoader':
-      'https://ssl.gstatic.com/accessibility/javascript/ext/loader.js',
+      'trk:243:https://ssl.gstatic.com/accessibility/javascript/ext/loader.js',
   'sticky': false,
   'typingEcho': 0,
   'useIBeamCursor': cvox.ChromeVox.isMac,
diff --git ui/accessibility/extensions/chromevoxclassic/host/chrome/host.js ui/accessibility/extensions/chromevoxclassic/host/chrome/host.js
index 44ef19f8c5521..3affd32ce9052 100644
--- ui/accessibility/extensions/chromevoxclassic/host/chrome/host.js
+++ ui/accessibility/extensions/chromevoxclassic/host/chrome/host.js
@@ -96,9 +96,9 @@ cvox.ChromeHost.prototype.init = function() {
           (!cvox.ApiImplementation.siteSpecificScriptLoader ||
            !cvox.ApiImplementation.siteSpecificScriptBase);
       cvox.ApiImplementation.siteSpecificScriptLoader =
-          'https://ssl.gstatic.com/accessibility/javascript/ext/loader.js';
+          'trk:244:https://ssl.gstatic.com/accessibility/javascript/ext/loader.js';
       cvox.ApiImplementation.siteSpecificScriptBase =
-          'https://ssl.gstatic.com/accessibility/javascript/ext/';
+          'trk:245:https://ssl.gstatic.com/accessibility/javascript/ext/';
       if (apiPrefsChanged) {
         var searchInit = prefs['siteSpecificEnhancements'] === 'true' ?
             cvox.SearchLoader.init :
diff --git ui/views/examples/webview_example.cc ui/views/examples/webview_example.cc
index 1571dd2fc9e43..2290a8fffc866 100644
--- ui/views/examples/webview_example.cc
+++ ui/views/examples/webview_example.cc
@@ -29,7 +29,7 @@ void WebViewExample::CreateExampleView(View* container) {
   container->SetLayoutManager(std::make_unique<FillLayout>());
   container->AddChildView(webview_);
 
-  webview_->LoadInitialURL(GURL("http://www.google.com/"));
+  webview_->LoadInitialURL(GURL("trk:174:http://www.google.com/"));
   webview_->GetWebContents()->Focus();
 }
 
-- 
2.29.1

